
firmware_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004790  08004790  00014790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004978  08004978  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004978  08004978  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800498c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800498c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a418  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001817  00000000  00000000  0002a497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000913  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025261  00000000  00000000  0002d18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd3d  00000000  00000000  000523ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4ade  00000000  00000000  0005e129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003574  00000000  00000000  00152c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015617c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004778 	.word	0x08004778

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004778 	.word	0x08004778

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	0000      	movs	r0, r0
	...

08000b58 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
void set_rgb(uint8_t red, uint8_t green, uint8_t blue);

int main(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t red_brightness = 0, green_brightness = 0, blue_brightness = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72fb      	strb	r3, [r7, #11]
 8000b62:	2300      	movs	r3, #0
 8000b64:	77fb      	strb	r3, [r7, #31]
 8000b66:	2300      	movs	r3, #0
 8000b68:	77bb      	strb	r3, [r7, #30]
	int increasing = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
	int color_state = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
	int time_elapsed = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
	int period = 2000;
 8000b76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b7a:	607b      	str	r3, [r7, #4]

	HAL_Init();
 8000b7c:	f000 fb0d 	bl	800119a <HAL_Init>
	SystemClock_Config();
 8000b80:	f000 f8c0 	bl	8000d04 <SystemClock_Config>

	MX_GPIO_Init();
 8000b84:	f000 f9c6 	bl	8000f14 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000b88:	f000 f8fc 	bl	8000d84 <MX_TIM1_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	485a      	ldr	r0, [pc, #360]	; (8000cf8 <main+0x1a0>)
 8000b90:	f001 fc6c 	bl	800246c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b94:	2104      	movs	r1, #4
 8000b96:	4858      	ldr	r0, [pc, #352]	; (8000cf8 <main+0x1a0>)
 8000b98:	f001 fc68 	bl	800246c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4856      	ldr	r0, [pc, #344]	; (8000cf8 <main+0x1a0>)
 8000ba0:	f001 fc64 	bl	800246c <HAL_TIM_PWM_Start>

	while (1) {
		if (color_state == 0) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d148      	bne.n	8000c3c <main+0xe4>
			/// RED Color
			for (int i = 0; i < 360; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e03e      	b.n	8000c2e <main+0xd6>
				red_brightness = (sin(i * 3.14 / 180) * 127) + 128;
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff fc83 	bl	80004bc <__aeabi_i2d>
 8000bb6:	a34c      	add	r3, pc, #304	; (adr r3, 8000ce8 <main+0x190>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fce8 	bl	8000590 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <main+0x1a4>)
 8000bce:	f7ff fe09 	bl	80007e4 <__aeabi_ddiv>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	ec43 2b17 	vmov	d7, r2, r3
 8000bda:	eeb0 0a47 	vmov.f32	s0, s14
 8000bde:	eef0 0a67 	vmov.f32	s1, s15
 8000be2:	f002 fd89 	bl	80036f8 <sin>
 8000be6:	ec51 0b10 	vmov	r0, r1, d0
 8000bea:	a341      	add	r3, pc, #260	; (adr r3, 8000cf0 <main+0x198>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fcce 	bl	8000590 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <main+0x1a8>)
 8000c02:	f7ff fb0f 	bl	8000224 <__adddf3>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ff81 	bl	8000b14 <__aeabi_d2uiz>
 8000c12:	4603      	mov	r3, r0
 8000c14:	72fb      	strb	r3, [r7, #11]
				set_rgb(red_brightness, 0, 0);
 8000c16:	7afb      	ldrb	r3, [r7, #11]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f9b7 	bl	8000f90 <set_rgb>
				HAL_Delay(5);
 8000c22:	2005      	movs	r0, #5
 8000c24:	f000 fb2a 	bl	800127c <HAL_Delay>
			for (int i = 0; i < 360; i++) {
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000c34:	dbbc      	blt.n	8000bb0 <main+0x58>
			}
			color_state = 1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e7b3      	b.n	8000ba4 <main+0x4c>
		} else if (color_state == 1) {
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d124      	bne.n	8000c8c <main+0x134>
			/// BLUE Color

			if (time_elapsed >= period) {
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	db03      	blt.n	8000c52 <main+0xfa>
				time_elapsed = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
				increasing = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
			}

			if (increasing) {
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <main+0x112>
				green_brightness += 5;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	3305      	adds	r3, #5
 8000c5c:	77fb      	strb	r3, [r7, #31]
				if (green_brightness >= 255) {
 8000c5e:	7ffb      	ldrb	r3, [r7, #31]
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d104      	bne.n	8000c6e <main+0x116>
					increasing = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	e001      	b.n	8000c6e <main+0x116>
				}
			} else {
				green_brightness = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	77fb      	strb	r3, [r7, #31]
			}

			set_rgb(0, green_brightness, 0);
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f98b 	bl	8000f90 <set_rgb>

			HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f000 fafe 	bl	800127c <HAL_Delay>
			time_elapsed += 10;
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	330a      	adds	r3, #10
 8000c84:	613b      	str	r3, [r7, #16]
			color_state = 2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e78b      	b.n	8000ba4 <main+0x4c>

		}

		else if (color_state == 3) {
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d188      	bne.n	8000ba4 <main+0x4c>
			/// GREEN Color

			while (time_elapsed < period) {
 8000c92:	e01f      	b.n	8000cd4 <main+0x17c>
				if (increasing) {
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <main+0x154>
					blue_brightness += 5;
 8000c9a:	7fbb      	ldrb	r3, [r7, #30]
 8000c9c:	3305      	adds	r3, #5
 8000c9e:	77bb      	strb	r3, [r7, #30]
					if (blue_brightness >= 255) {
 8000ca0:	7fbb      	ldrb	r3, [r7, #30]
 8000ca2:	2bff      	cmp	r3, #255	; 0xff
 8000ca4:	d10a      	bne.n	8000cbc <main+0x164>
						increasing = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	e007      	b.n	8000cbc <main+0x164>
					}
				} else {
					blue_brightness -= 5;
 8000cac:	7fbb      	ldrb	r3, [r7, #30]
 8000cae:	3b05      	subs	r3, #5
 8000cb0:	77bb      	strb	r3, [r7, #30]
					if (blue_brightness <= 0) {
 8000cb2:	7fbb      	ldrb	r3, [r7, #30]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <main+0x164>
						increasing = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
					}
				}

				set_rgb(0, 0, blue_brightness);
 8000cbc:	7fbb      	ldrb	r3, [r7, #30]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f964 	bl	8000f90 <set_rgb>
				HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fad7 	bl	800127c <HAL_Delay>
				time_elapsed += 10;
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	330a      	adds	r3, #10
 8000cd2:	613b      	str	r3, [r7, #16]
			while (time_elapsed < period) {
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbdb      	blt.n	8000c94 <main+0x13c>
			}
			time_elapsed = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
			color_state = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
		if (color_state == 0) {
 8000ce4:	e75e      	b.n	8000ba4 <main+0x4c>
 8000ce6:	bf00      	nop
 8000ce8:	51eb851f 	.word	0x51eb851f
 8000cec:	40091eb8 	.word	0x40091eb8
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	405fc000 	.word	0x405fc000
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	40668000 	.word	0x40668000
 8000d00:	40600000 	.word	0x40600000

08000d04 <SystemClock_Config>:
		}
	}
}

void SystemClock_Config(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b094      	sub	sp, #80	; 0x50
 8000d08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	2238      	movs	r2, #56	; 0x38
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fcc2 	bl	800369c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d2a:	f000 fd47 	bl	80017bc <HAL_PWREx_ControlVoltageScaling>


	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d40:	f107 0318 	add.w	r3, r7, #24
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fddd 	bl	8001904 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x50>
		Error_Handler();
 8000d50:	f000 f93c 	bl	8000fcc <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f8e1 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x78>
		Error_Handler();
 8000d78:	f000 f928 	bl	8000fcc <Error_Handler>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	; 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b09c      	sub	sp, #112	; 0x70
 8000d88:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000da4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2234      	movs	r2, #52	; 0x34
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fc6c 	bl	800369c <memset>

	htim1.Instance = TIM1;
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000dc6:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <MX_TIM1_Init+0x18c>)
 8000dc8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000dca:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ddc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b4b      	ldr	r3, [pc, #300]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000df0:	4846      	ldr	r0, [pc, #280]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000df2:	f001 fa83 	bl	80022fc <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000dfc:	f000 f8e6 	bl	8000fcc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000e06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	483f      	ldr	r0, [pc, #252]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000e0e:	f001 fd53 	bl	80028b8 <HAL_TIM_ConfigClockSource>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x98>
		Error_Handler();
 8000e18:	f000 f8d8 	bl	8000fcc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000e1c:	483b      	ldr	r0, [pc, #236]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000e1e:	f001 fac4 	bl	80023aa <HAL_TIM_PWM_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000e28:	f000 f8d0 	bl	8000fcc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000e38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000e40:	f002 fae4 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000e4a:	f000 f8bf 	bl	8000fcc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000e6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4826      	ldr	r0, [pc, #152]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000e74:	f001 fc0c 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0xfe>
			!= HAL_OK) {
		Error_Handler();
 8000e7e:	f000 f8a5 	bl	8000fcc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000e82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e86:	2204      	movs	r2, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000e8c:	f001 fc00 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x116>
			!= HAL_OK) {
		Error_Handler();
 8000e96:	f000 f899 	bl	8000fcc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000e9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000ea4:	f001 fbf4 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0x12e>
			!= HAL_OK) {
		Error_Handler();
 8000eae:	f000 f88d 	bl	8000fcc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000ef0:	f002 fb22 	bl	8003538 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 8000efa:	f000 f867 	bl	8000fcc <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MX_TIM1_Init+0x188>)
 8000f00:	f000 f8ae 	bl	8001060 <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3770      	adds	r7, #112	; 0x70
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	40012c00 	.word	0x40012c00

08000f14 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_GPIO_Init+0x78>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin,
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2138      	movs	r1, #56	; 0x38
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f000 fc13 	bl	800178c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	GPIO_InitStruct.Pin = LED_RED_Pin | LED_GREEN_Pin | LED_BLUE_Pin;
 8000f66:	2338      	movs	r3, #56	; 0x38
 8000f68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f000 fa82 	bl	8001488 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000

08000f90 <set_rgb>:

void set_rgb(uint8_t red, uint8_t green, uint8_t blue) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	717b      	strb	r3, [r7, #5]
	htim1.Instance->CCR1 = red;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <set_rgb+0x38>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = green;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <set_rgb+0x38>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = blue;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <set_rgb+0x38>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	797a      	ldrb	r2, [r7, #5]
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000028 	.word	0x20000028

08000fcc <Error_Handler>:

void Error_Handler(void) {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
	__disable_irq();
	while (1) {
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_TIM_Base_MspInit+0x38>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10b      	bne.n	800104a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_TIM_Base_MspInit+0x3c>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_TIM_Base_MspInit+0x3c>)
 8001038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103c:	6613      	str	r3, [r2, #96]	; 0x60
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_TIM_Base_MspInit+0x3c>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40012c00 	.word	0x40012c00
 800105c:	40021000 	.word	0x40021000

08001060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_TIM_MspPostInit+0x64>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d11b      	bne.n	80010ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_TIM_MspPostInit+0x68>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_TIM_MspPostInit+0x68>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_TIM_MspPostInit+0x68>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800109a:	2307      	movs	r3, #7
 800109c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_TIM_MspPostInit+0x6c>)
 80010b6:	f000 f9e7 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40012c00 	.word	0x40012c00
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000800 	.word	0x48000800

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f890 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopForever+0xe>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopForever+0x16>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001172:	f7ff ffd7 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f002 fa99 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff fced 	bl	8000b58 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800118c:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 8001190:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001194:	20000078 	.word	0x20000078

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>

0800119a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f93d 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	200f      	movs	r0, #15
 80011ac:	f000 f80e 	bl	80011cc <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e001      	b.n	80011c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011bc:	f7ff ff0c 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c0:	79fb      	ldrb	r3, [r7, #7]

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_InitTick+0x68>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d022      	beq.n	8001226 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_InitTick+0x6c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_InitTick+0x68>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f93a 	bl	800146e <HAL_SYSTICK_Config>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10f      	bne.n	8001220 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d809      	bhi.n	800121a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001206:	2200      	movs	r2, #0
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120e:	f000 f914 	bl	800143a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_InitTick+0x70>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e007      	b.n	800122a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e004      	b.n	800122a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000008 	.word	0x20000008
 8001238:	20000000 	.word	0x20000000
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x1c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x20>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	4a03      	ldr	r2, [pc, #12]	; (800125c <HAL_IncTick+0x1c>)
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000074 	.word	0x20000074
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000074 	.word	0x20000074

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001294:	d004      	beq.n	80012a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_Delay+0x40>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a0:	bf00      	nop
 80012a2:	f7ff ffdf 	bl	8001264 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d8f7      	bhi.n	80012a2 <HAL_Delay+0x26>
  {
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff47 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff5e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff90 	bl	8001378 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffb2 	bl	80013e0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001496:	e15a      	b.n	800174e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 814c 	beq.w	8001748 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d123      	bne.n	80015ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	220f      	movs	r2, #15
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	6939      	ldr	r1, [r7, #16]
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0203 	and.w	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a6 	beq.w	8001748 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4b5b      	ldr	r3, [pc, #364]	; (800176c <HAL_GPIO_Init+0x2e4>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	4a5a      	ldr	r2, [pc, #360]	; (800176c <HAL_GPIO_Init+0x2e4>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6613      	str	r3, [r2, #96]	; 0x60
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_GPIO_Init+0x2e4>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001614:	4a56      	ldr	r2, [pc, #344]	; (8001770 <HAL_GPIO_Init+0x2e8>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800163e:	d01f      	beq.n	8001680 <HAL_GPIO_Init+0x1f8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4c      	ldr	r2, [pc, #304]	; (8001774 <HAL_GPIO_Init+0x2ec>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d019      	beq.n	800167c <HAL_GPIO_Init+0x1f4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <HAL_GPIO_Init+0x2f0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_Init+0x1f0>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4a      	ldr	r2, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2f4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1ec>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_GPIO_Init+0x2f8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1e8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2fc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1e4>
 8001668:	2305      	movs	r3, #5
 800166a:	e00a      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 800166c:	2306      	movs	r3, #6
 800166e:	e008      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001670:	2304      	movs	r3, #4
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001674:	2303      	movs	r3, #3
 8001676:	e004      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001678:	2302      	movs	r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_GPIO_Init+0x1fa>
 8001680:	2300      	movs	r3, #0
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	f002 0203 	and.w	r2, r2, #3
 8001688:	0092      	lsls	r2, r2, #2
 800168a:	4093      	lsls	r3, r2
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001692:	4937      	ldr	r1, [pc, #220]	; (8001770 <HAL_GPIO_Init+0x2e8>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a30      	ldr	r2, [pc, #192]	; (8001788 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a26      	ldr	r2, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <HAL_GPIO_Init+0x300>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <HAL_GPIO_Init+0x300>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x300>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_GPIO_Init+0x300>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	f47f ae9d 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	371c      	adds	r7, #28
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	40021000 	.word	0x40021000
 8001770:	40010000 	.word	0x40010000
 8001774:	48000400 	.word	0x48000400
 8001778:	48000800 	.word	0x48000800
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48001000 	.word	0x48001000
 8001784:	48001400 	.word	0x48001400
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d141      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d6:	d131      	bne.n	800183c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017de:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017f0:	4a41      	ldr	r2, [pc, #260]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2232      	movs	r2, #50	; 0x32
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a3f      	ldr	r2, [pc, #252]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	e002      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3b01      	subs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001822:	d102      	bne.n	800182a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f2      	bne.n	8001810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d158      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e057      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800183c:	4b2e      	ldr	r3, [pc, #184]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800184c:	e04d      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001854:	d141      	bne.n	80018da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001856:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	d131      	bne.n	80018c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a23      	ldr	r2, [pc, #140]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2232      	movs	r2, #50	; 0x32
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189a:	e002      	b.n	80018a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3b01      	subs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ae:	d102      	bne.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f2      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d112      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e011      	b.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018d8:	e007      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40007000 	.word	0x40007000
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e306      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d075      	beq.n	8001a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001922:	4b97      	ldr	r3, [pc, #604]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d102      	bne.n	8001942 <HAL_RCC_OscConfig+0x3e>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d002      	beq.n	8001948 <HAL_RCC_OscConfig+0x44>
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d10b      	bne.n	8001960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05b      	beq.n	8001a0c <HAL_RCC_OscConfig+0x108>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d157      	bne.n	8001a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e2e1      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001968:	d106      	bne.n	8001978 <HAL_RCC_OscConfig+0x74>
 800196a:	4b85      	ldr	r3, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a84      	ldr	r2, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7f      	ldr	r3, [pc, #508]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7e      	ldr	r2, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7b      	ldr	r2, [pc, #492]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xb0>
 800199c:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a77      	ldr	r2, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b75      	ldr	r3, [pc, #468]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a74      	ldr	r2, [pc, #464]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fc52 	bl	8001264 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fc4e 	bl	8001264 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e2a6      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xc0>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc3e 	bl	8001264 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fc3a 	bl	8001264 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e292      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0xe8>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d075      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1a:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_OscConfig+0x136>
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d11f      	bne.n	8001a80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x154>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e265      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4946      	ldr	r1, [pc, #280]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fbab 	bl	80011cc <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d043      	beq.n	8001b04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e251      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fbe6 	bl	8001264 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fbe2 	bl	8001264 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e23a      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	492d      	ldr	r1, [pc, #180]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
 8001ace:	e01a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff fbc2 	bl	8001264 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbbe 	bl	8001264 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e216      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d041      	beq.n	8001b96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2a:	f7ff fb9b 	bl	8001264 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b32:	f7ff fb97 	bl	8001264 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1ef      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0ef      	beq.n	8001b32 <HAL_RCC_OscConfig+0x22e>
 8001b52:	e020      	b.n	8001b96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb7e 	bl	8001264 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6a:	e00d      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fb7a 	bl	8001264 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d906      	bls.n	8001b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1d2      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	4b8c      	ldr	r3, [pc, #560]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ea      	bne.n	8001b6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2b4>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x2b6>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bda:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <HAL_RCC_OscConfig+0x4bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x4bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x4bc>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fb37 	bl	8001264 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7ff fb33 	bl	8001264 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e18b      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x4bc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_RCC_OscConfig+0x32e>
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c30:	e024      	b.n	8001c7c <HAL_RCC_OscConfig+0x378>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d110      	bne.n	8001c5c <HAL_RCC_OscConfig+0x358>
 8001c3a:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	4a5e      	ldr	r2, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	4a5a      	ldr	r2, [pc, #360]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_OscConfig+0x378>
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff faee 	bl	8001264 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff faea 	bl	8001264 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e140      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCC_OscConfig+0x388>
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fad7 	bl	8001264 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff fad3 	bl	8001264 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e129      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ed      	bne.n	8001cba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff faa6 	bl	8001264 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff faa2 	bl	8001264 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0fa      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x418>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fa89 	bl	8001264 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d56:	f7ff fa85 	bl	8001264 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0dd      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80d1 	beq.w	8001f22 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	f000 808b 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d15e      	bne.n	8001e54 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a08      	ldr	r2, [pc, #32]	; (8001dbc <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff fa5f 	bl	8001264 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e00c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff fa5b 	bl	8001264 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d905      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0b3      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ec      	bne.n	8001daa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd0:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_RCC_OscConfig+0x62c>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6a11      	ldr	r1, [r2, #32]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001de0:	3a01      	subs	r2, #1
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	4311      	orrs	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dea:	0212      	lsls	r2, r2, #8
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001df2:	0852      	lsrs	r2, r2, #1
 8001df4:	3a01      	subs	r2, #1
 8001df6:	0552      	lsls	r2, r2, #21
 8001df8:	4311      	orrs	r1, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dfe:	0852      	lsrs	r2, r2, #1
 8001e00:	3a01      	subs	r2, #1
 8001e02:	0652      	lsls	r2, r2, #25
 8001e04:	4311      	orrs	r1, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e0a:	06d2      	lsls	r2, r2, #27
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4947      	ldr	r1, [pc, #284]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e14:	4b45      	ldr	r3, [pc, #276]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a44      	ldr	r2, [pc, #272]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fa1a 	bl	8001264 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff fa16 	bl	8001264 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e06e      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x530>
 8001e52:	e066      	b.n	8001f22 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f9f2 	bl	8001264 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff f9ee 	bl	8001264 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e046      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x580>
 8001ea2:	e03e      	b.n	8001f22 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e039      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_RCC_OscConfig+0x628>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d12c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d123      	bne.n	8001f1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d113      	bne.n	8001f1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	3b01      	subs	r3, #1
 8001f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	019f800c 	.word	0x019f800c

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e11e      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d910      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b8e      	ldr	r3, [pc, #568]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 020f 	bic.w	r2, r3, #15
 8001f62:	498c      	ldr	r1, [pc, #560]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e106      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d073      	beq.n	8002070 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d129      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0f4      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fa0:	f000 f966 	bl	8002270 <RCC_GetSysClockFreqFromPLLSource>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4a7c      	ldr	r2, [pc, #496]	; (800219c <HAL_RCC_ClockConfig+0x268>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d93f      	bls.n	800202e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d033      	beq.n	800202e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d12f      	bne.n	800202e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fce:	4b72      	ldr	r3, [pc, #456]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd6:	4a70      	ldr	r2, [pc, #448]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e024      	b.n	800202e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0c6      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0be      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800200c:	f000 f8ce 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8002010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_RCC_ClockConfig+0x268>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d909      	bls.n	800202e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201a:	4b5f      	ldr	r3, [pc, #380]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4957      	ldr	r1, [pc, #348]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002040:	f7ff f910 	bl	8001264 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff f90c 	bl	8001264 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e095      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b4e      	ldr	r3, [pc, #312]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b43      	ldr	r3, [pc, #268]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a42      	ldr	r2, [pc, #264]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020a0:	4b3d      	ldr	r3, [pc, #244]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020a8:	4a3b      	ldr	r2, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4936      	ldr	r1, [pc, #216]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ca:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4a32      	ldr	r2, [pc, #200]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 80020d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d6:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d21d      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 020f 	bic.w	r2, r3, #15
 80020ec:	4929      	ldr	r1, [pc, #164]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f8b6 	bl	8001264 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f8b2 	bl	8001264 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e03b      	b.n	800218a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x260>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d1ed      	bne.n	80020fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4917      	ldr	r1, [pc, #92]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490f      	ldr	r1, [pc, #60]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800215e:	f000 f825 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_ClockConfig+0x264>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	490c      	ldr	r1, [pc, #48]	; (80021a0 <HAL_RCC_ClockConfig+0x26c>)
 8002170:	5ccb      	ldrb	r3, [r1, r3]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x270>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f822 	bl	80011cc <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
 800219c:	04c4b400 	.word	0x04c4b400
 80021a0:	08004790 	.word	0x08004790
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e047      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e03e      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d136      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	68d2      	ldr	r2, [r2, #12]
 800220c:	0a12      	lsrs	r2, r2, #8
 800220e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
      break;
 8002218:	e00c      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	0a12      	lsrs	r2, r2, #8
 8002228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
      break;
 8002232:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	e001      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	4618      	mov	r0, r3
 8002258:	371c      	adds	r7, #28
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d10c      	bne.n	80022ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800229e:	68d2      	ldr	r2, [r2, #12]
 80022a0:	0a12      	lsrs	r2, r2, #8
 80022a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
    break;
 80022ac:	e00c      	b.n	80022c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	0a12      	lsrs	r2, r2, #8
 80022bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    break;
 80022c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0e5b      	lsrs	r3, r3, #25
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022e2:	687b      	ldr	r3, [r7, #4]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40021000 	.word	0x40021000
 80022f4:	007a1200 	.word	0x007a1200
 80022f8:	00f42400 	.word	0x00f42400

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e049      	b.n	80023a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fe7c 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fbd2 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e049      	b.n	8002450 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f841 	bl	8002458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f000 fb7b 	bl	8002ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_TIM_PWM_Start+0x24>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e03c      	b.n	800250a <HAL_TIM_PWM_Start+0x9e>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	2b04      	cmp	r3, #4
 8002494:	d109      	bne.n	80024aa <HAL_TIM_PWM_Start+0x3e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	e02f      	b.n	800250a <HAL_TIM_PWM_Start+0x9e>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d109      	bne.n	80024c4 <HAL_TIM_PWM_Start+0x58>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e022      	b.n	800250a <HAL_TIM_PWM_Start+0x9e>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d109      	bne.n	80024de <HAL_TIM_PWM_Start+0x72>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	e015      	b.n	800250a <HAL_TIM_PWM_Start+0x9e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d109      	bne.n	80024f8 <HAL_TIM_PWM_Start+0x8c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e008      	b.n	800250a <HAL_TIM_PWM_Start+0x9e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0a6      	b.n	8002660 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d104      	bne.n	8002522 <HAL_TIM_PWM_Start+0xb6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002520:	e023      	b.n	800256a <HAL_TIM_PWM_Start+0xfe>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d104      	bne.n	8002532 <HAL_TIM_PWM_Start+0xc6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002530:	e01b      	b.n	800256a <HAL_TIM_PWM_Start+0xfe>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d104      	bne.n	8002542 <HAL_TIM_PWM_Start+0xd6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002540:	e013      	b.n	800256a <HAL_TIM_PWM_Start+0xfe>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d104      	bne.n	8002552 <HAL_TIM_PWM_Start+0xe6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002550:	e00b      	b.n	800256a <HAL_TIM_PWM_Start+0xfe>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0xf6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	e003      	b.n	800256a <HAL_TIM_PWM_Start+0xfe>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2201      	movs	r2, #1
 8002570:	6839      	ldr	r1, [r7, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f000 ff24 	bl	80033c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_TIM_PWM_Start+0x1fc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d018      	beq.n	80025b4 <HAL_TIM_PWM_Start+0x148>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_TIM_PWM_Start+0x200>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_TIM_PWM_Start+0x148>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a37      	ldr	r2, [pc, #220]	; (8002670 <HAL_TIM_PWM_Start+0x204>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_TIM_PWM_Start+0x148>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a36      	ldr	r2, [pc, #216]	; (8002674 <HAL_TIM_PWM_Start+0x208>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_TIM_PWM_Start+0x148>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_TIM_PWM_Start+0x20c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_PWM_Start+0x148>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_TIM_PWM_Start+0x210>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_PWM_Start+0x14c>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_TIM_PWM_Start+0x14e>
 80025b8:	2300      	movs	r3, #0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_TIM_PWM_Start+0x1fc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d022      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d01d      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_TIM_PWM_Start+0x214>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d018      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_TIM_PWM_Start+0x218>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <HAL_TIM_PWM_Start+0x21c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00e      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <HAL_TIM_PWM_Start+0x200>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_TIM_PWM_Start+0x204>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_TIM_PWM_Start+0x1b2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIM_PWM_Start+0x210>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d115      	bne.n	800264a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_TIM_PWM_Start+0x220>)
 8002626:	4013      	ands	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b06      	cmp	r3, #6
 800262e:	d015      	beq.n	800265c <HAL_TIM_PWM_Start+0x1f0>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002636:	d011      	beq.n	800265c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	e008      	b.n	800265c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e000      	b.n	800265e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800265c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40013400 	.word	0x40013400
 8002670:	40014000 	.word	0x40014000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	40015000 	.word	0x40015000
 8002680:	40000400 	.word	0x40000400
 8002684:	40000800 	.word	0x40000800
 8002688:	40000c00 	.word	0x40000c00
 800268c:	00010007 	.word	0x00010007

08002690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ff      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b14      	cmp	r3, #20
 80026ba:	f200 80f0 	bhi.w	800289e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80026be:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	08002719 	.word	0x08002719
 80026c8:	0800289f 	.word	0x0800289f
 80026cc:	0800289f 	.word	0x0800289f
 80026d0:	0800289f 	.word	0x0800289f
 80026d4:	08002759 	.word	0x08002759
 80026d8:	0800289f 	.word	0x0800289f
 80026dc:	0800289f 	.word	0x0800289f
 80026e0:	0800289f 	.word	0x0800289f
 80026e4:	0800279b 	.word	0x0800279b
 80026e8:	0800289f 	.word	0x0800289f
 80026ec:	0800289f 	.word	0x0800289f
 80026f0:	0800289f 	.word	0x0800289f
 80026f4:	080027db 	.word	0x080027db
 80026f8:	0800289f 	.word	0x0800289f
 80026fc:	0800289f 	.word	0x0800289f
 8002700:	0800289f 	.word	0x0800289f
 8002704:	0800281d 	.word	0x0800281d
 8002708:	0800289f 	.word	0x0800289f
 800270c:	0800289f 	.word	0x0800289f
 8002710:	0800289f 	.word	0x0800289f
 8002714:	0800285d 	.word	0x0800285d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fa88 	bl	8002c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0208 	orr.w	r2, r2, #8
 8002732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6999      	ldr	r1, [r3, #24]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]
      break;
 8002756:	e0a5      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fb02 	bl	8002d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
      break;
 8002798:	e084      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fb75 	bl	8002e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0208 	orr.w	r2, r2, #8
 80027b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0204 	bic.w	r2, r2, #4
 80027c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
      break;
 80027d8:	e064      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fbe7 	bl	8002fb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	021a      	lsls	r2, r3, #8
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	61da      	str	r2, [r3, #28]
      break;
 800281a:	e043      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fc5a 	bl	80030dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800285a:	e023      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fca4 	bl	80031b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002876:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002886:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800289c:	e002      	b.n	80028a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
      break;
 80028a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop

080028b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_TIM_ConfigClockSource+0x1c>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e0f6      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x20a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80028f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6f      	ldr	r2, [pc, #444]	; (8002acc <HAL_TIM_ConfigClockSource+0x214>)
 800290e:	4293      	cmp	r3, r2
 8002910:	f000 80c1 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002914:	4a6d      	ldr	r2, [pc, #436]	; (8002acc <HAL_TIM_ConfigClockSource+0x214>)
 8002916:	4293      	cmp	r3, r2
 8002918:	f200 80c6 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800291c:	4a6c      	ldr	r2, [pc, #432]	; (8002ad0 <HAL_TIM_ConfigClockSource+0x218>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f000 80b9 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_TIM_ConfigClockSource+0x218>)
 8002926:	4293      	cmp	r3, r2
 8002928:	f200 80be 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800292c:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_TIM_ConfigClockSource+0x21c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	f000 80b1 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002934:	4a67      	ldr	r2, [pc, #412]	; (8002ad4 <HAL_TIM_ConfigClockSource+0x21c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	f200 80b6 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800293c:	4a66      	ldr	r2, [pc, #408]	; (8002ad8 <HAL_TIM_ConfigClockSource+0x220>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f000 80a9 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002944:	4a64      	ldr	r2, [pc, #400]	; (8002ad8 <HAL_TIM_ConfigClockSource+0x220>)
 8002946:	4293      	cmp	r3, r2
 8002948:	f200 80ae 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800294c:	4a63      	ldr	r2, [pc, #396]	; (8002adc <HAL_TIM_ConfigClockSource+0x224>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f000 80a1 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002954:	4a61      	ldr	r2, [pc, #388]	; (8002adc <HAL_TIM_ConfigClockSource+0x224>)
 8002956:	4293      	cmp	r3, r2
 8002958:	f200 80a6 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800295c:	4a60      	ldr	r2, [pc, #384]	; (8002ae0 <HAL_TIM_ConfigClockSource+0x228>)
 800295e:	4293      	cmp	r3, r2
 8002960:	f000 8099 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002964:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <HAL_TIM_ConfigClockSource+0x228>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f200 809e 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800296c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002970:	f000 8091 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002974:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002978:	f200 8096 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800297c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002980:	f000 8089 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 8002984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002988:	f200 808e 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d03e      	beq.n	8002a10 <HAL_TIM_ConfigClockSource+0x158>
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	f200 8087 	bhi.w	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	f000 8086 	beq.w	8002aae <HAL_TIM_ConfigClockSource+0x1f6>
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d87f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d01a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x12a>
 80029ac:	2b70      	cmp	r3, #112	; 0x70
 80029ae:	d87b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029b0:	2b60      	cmp	r3, #96	; 0x60
 80029b2:	d050      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x19e>
 80029b4:	2b60      	cmp	r3, #96	; 0x60
 80029b6:	d877      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029b8:	2b50      	cmp	r3, #80	; 0x50
 80029ba:	d03c      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x17e>
 80029bc:	2b50      	cmp	r3, #80	; 0x50
 80029be:	d873      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d058      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x1be>
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d86f      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d064      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 80029cc:	2b30      	cmp	r3, #48	; 0x30
 80029ce:	d86b      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d060      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d867      	bhi.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05c      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d05a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x1de>
 80029e0:	e062      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f000 fcc5 	bl	8003380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
      break;
 8002a0e:	e04f      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6899      	ldr	r1, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f000 fcae 	bl	8003380 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e03c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 fc20 	bl	8003288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2150      	movs	r1, #80	; 0x50
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc79 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002a54:	e02c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 fc3f 	bl	80032e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2160      	movs	r1, #96	; 0x60
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fc69 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e01c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 fc00 	bl	8003288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fc59 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f000 fc50 	bl	8003346 <TIM_ITRx_SetConfig>
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100070 	.word	0x00100070
 8002ad0:	00100060 	.word	0x00100060
 8002ad4:	00100050 	.word	0x00100050
 8002ad8:	00100040 	.word	0x00100040
 8002adc:	00100030 	.word	0x00100030
 8002ae0:	00100020 	.word	0x00100020

08002ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a46      	ldr	r2, [pc, #280]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d017      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d013      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00f      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <TIM_Base_SetConfig+0x134>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <TIM_Base_SetConfig+0x138>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x48>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <TIM_Base_SetConfig+0x140>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d023      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d01f      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <TIM_Base_SetConfig+0x130>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01b      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <TIM_Base_SetConfig+0x134>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d017      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2e      	ldr	r2, [pc, #184]	; (8002c1c <TIM_Base_SetConfig+0x138>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2d      	ldr	r2, [pc, #180]	; (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <TIM_Base_SetConfig+0x144>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <TIM_Base_SetConfig+0x148>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a2b      	ldr	r2, [pc, #172]	; (8002c30 <TIM_Base_SetConfig+0x14c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0xaa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <TIM_Base_SetConfig+0x140>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <TIM_Base_SetConfig+0x12c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <TIM_Base_SetConfig+0x110>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TIM_Base_SetConfig+0x13c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <TIM_Base_SetConfig+0x110>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <TIM_Base_SetConfig+0x144>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x110>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <TIM_Base_SetConfig+0x148>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x110>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <TIM_Base_SetConfig+0x14c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x110>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <TIM_Base_SetConfig+0x140>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	615a      	str	r2, [r3, #20]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40000c00 	.word	0x40000c00
 8002c20:	40013400 	.word	0x40013400
 8002c24:	40015000 	.word	0x40015000
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40014400 	.word	0x40014400
 8002c30:	40014800 	.word	0x40014800

08002c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0303 	bic.w	r3, r3, #3
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f023 0302 	bic.w	r3, r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a30      	ldr	r2, [pc, #192]	; (8002d50 <TIM_OC1_SetConfig+0x11c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <TIM_OC1_SetConfig+0x88>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <TIM_OC1_SetConfig+0x120>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <TIM_OC1_SetConfig+0x88>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <TIM_OC1_SetConfig+0x124>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_OC1_SetConfig+0x88>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <TIM_OC1_SetConfig+0x128>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_OC1_SetConfig+0x88>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_OC1_SetConfig+0x12c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_OC1_SetConfig+0x88>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <TIM_OC1_SetConfig+0x130>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d10c      	bne.n	8002cd6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f023 0308 	bic.w	r3, r3, #8
 8002cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <TIM_OC1_SetConfig+0x11c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <TIM_OC1_SetConfig+0xd2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <TIM_OC1_SetConfig+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00f      	beq.n	8002d06 <TIM_OC1_SetConfig+0xd2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <TIM_OC1_SetConfig+0x124>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_OC1_SetConfig+0xd2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <TIM_OC1_SetConfig+0x128>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_OC1_SetConfig+0xd2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <TIM_OC1_SetConfig+0x12c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_OC1_SetConfig+0xd2>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <TIM_OC1_SetConfig+0x130>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800
 8002d64:	40015000 	.word	0x40015000

08002d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0210 	bic.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0320 	bic.w	r3, r3, #32
 8002db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <TIM_OC2_SetConfig+0x110>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_OC2_SetConfig+0x74>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <TIM_OC2_SetConfig+0x114>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_OC2_SetConfig+0x74>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <TIM_OC2_SetConfig+0x118>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10d      	bne.n	8002df8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <TIM_OC2_SetConfig+0x110>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <TIM_OC2_SetConfig+0xc0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <TIM_OC2_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00f      	beq.n	8002e28 <TIM_OC2_SetConfig+0xc0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <TIM_OC2_SetConfig+0x11c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <TIM_OC2_SetConfig+0xc0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_OC2_SetConfig+0x120>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d007      	beq.n	8002e28 <TIM_OC2_SetConfig+0xc0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <TIM_OC2_SetConfig+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_OC2_SetConfig+0xc0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <TIM_OC2_SetConfig+0x118>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d113      	bne.n	8002e50 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40013400 	.word	0x40013400
 8002e80:	40015000 	.word	0x40015000
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800

08002e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <TIM_OC3_SetConfig+0x10c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_OC3_SetConfig+0x72>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <TIM_OC3_SetConfig+0x110>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <TIM_OC3_SetConfig+0x72>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <TIM_OC3_SetConfig+0x114>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10d      	bne.n	8002f1e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <TIM_OC3_SetConfig+0x10c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <TIM_OC3_SetConfig+0xbe>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1d      	ldr	r2, [pc, #116]	; (8002fa0 <TIM_OC3_SetConfig+0x110>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00f      	beq.n	8002f4e <TIM_OC3_SetConfig+0xbe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <TIM_OC3_SetConfig+0x118>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <TIM_OC3_SetConfig+0xbe>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <TIM_OC3_SetConfig+0x11c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_OC3_SetConfig+0xbe>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <TIM_OC3_SetConfig+0x120>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_OC3_SetConfig+0xbe>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <TIM_OC3_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d113      	bne.n	8002f76 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40013400 	.word	0x40013400
 8002fa4:	40015000 	.word	0x40015000
 8002fa8:	40014000 	.word	0x40014000
 8002fac:	40014400 	.word	0x40014400
 8002fb0:	40014800 	.word	0x40014800

08002fb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	031b      	lsls	r3, r3, #12
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <TIM_OC4_SetConfig+0x110>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_OC4_SetConfig+0x74>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <TIM_OC4_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_OC4_SetConfig+0x74>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <TIM_OC4_SetConfig+0x118>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10d      	bne.n	8003044 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800302e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	031b      	lsls	r3, r3, #12
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003042:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <TIM_OC4_SetConfig+0x110>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <TIM_OC4_SetConfig+0xc0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <TIM_OC4_SetConfig+0x114>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00f      	beq.n	8003074 <TIM_OC4_SetConfig+0xc0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <TIM_OC4_SetConfig+0x11c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_OC4_SetConfig+0xc0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <TIM_OC4_SetConfig+0x120>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC4_SetConfig+0xc0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <TIM_OC4_SetConfig+0x124>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC4_SetConfig+0xc0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <TIM_OC4_SetConfig+0x118>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d113      	bne.n	800309c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003082:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40015000 	.word	0x40015000
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40014400 	.word	0x40014400
 80030d8:	40014800 	.word	0x40014800

080030dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <TIM_OC5_SetConfig+0xbc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <TIM_OC5_SetConfig+0x82>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <TIM_OC5_SetConfig+0xc0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00f      	beq.n	800315e <TIM_OC5_SetConfig+0x82>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <TIM_OC5_SetConfig+0xc4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00b      	beq.n	800315e <TIM_OC5_SetConfig+0x82>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <TIM_OC5_SetConfig+0xc8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <TIM_OC5_SetConfig+0x82>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <TIM_OC5_SetConfig+0xcc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_OC5_SetConfig+0x82>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a14      	ldr	r2, [pc, #80]	; (80031ac <TIM_OC5_SetConfig+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d109      	bne.n	8003172 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40013400 	.word	0x40013400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	40015000 	.word	0x40015000

080031b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	051b      	lsls	r3, r3, #20
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <TIM_OC6_SetConfig+0xc0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d013      	beq.n	8003234 <TIM_OC6_SetConfig+0x84>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a19      	ldr	r2, [pc, #100]	; (8003274 <TIM_OC6_SetConfig+0xc4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_OC6_SetConfig+0x84>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a18      	ldr	r2, [pc, #96]	; (8003278 <TIM_OC6_SetConfig+0xc8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_OC6_SetConfig+0x84>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <TIM_OC6_SetConfig+0xcc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_OC6_SetConfig+0x84>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a16      	ldr	r2, [pc, #88]	; (8003280 <TIM_OC6_SetConfig+0xd0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_OC6_SetConfig+0x84>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a15      	ldr	r2, [pc, #84]	; (8003284 <TIM_OC6_SetConfig+0xd4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40013400 	.word	0x40013400
 8003278:	40014000 	.word	0x40014000
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800
 8003284:	40015000 	.word	0x40015000

08003288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 030a 	bic.w	r3, r3, #10
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b087      	sub	sp, #28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f023 0210 	bic.w	r2, r3, #16
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	031b      	lsls	r3, r3, #12
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800335c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	f043 0307 	orr.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1a      	ldr	r2, [r3, #32]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e074      	b.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a34      	ldr	r2, [pc, #208]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003468:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d01d      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a15      	ldr	r2, [pc, #84]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10c      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40013400 	.word	0x40013400
 8003524:	40015000 	.word	0x40015000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40014000 	.word	0x40014000

08003538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003550:	2302      	movs	r3, #2
 8003552:	e096      	b.n	8003682 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	041b      	lsls	r3, r3, #16
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	; (8003698 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d106      	bne.n	80035fa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a24      	ldr	r2, [pc, #144]	; (8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d12b      	bne.n	8003670 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	051b      	lsls	r3, r3, #20
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a10      	ldr	r2, [pc, #64]	; (8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d106      	bne.n	8003670 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40015000 	.word	0x40015000

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4d0d      	ldr	r5, [pc, #52]	; (80036e4 <__libc_init_array+0x38>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	; (80036e8 <__libc_init_array+0x3c>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	2600      	movs	r6, #0
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	4d0b      	ldr	r5, [pc, #44]	; (80036ec <__libc_init_array+0x40>)
 80036be:	4c0c      	ldr	r4, [pc, #48]	; (80036f0 <__libc_init_array+0x44>)
 80036c0:	f001 f85a 	bl	8004778 <_init>
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	2600      	movs	r6, #0
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	08004978 	.word	0x08004978
 80036e8:	08004978 	.word	0x08004978
 80036ec:	08004978 	.word	0x08004978
 80036f0:	0800497c 	.word	0x0800497c
 80036f4:	00000000 	.word	0x00000000

080036f8 <sin>:
 80036f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036fa:	ec53 2b10 	vmov	r2, r3, d0
 80036fe:	4828      	ldr	r0, [pc, #160]	; (80037a0 <sin+0xa8>)
 8003700:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003704:	4281      	cmp	r1, r0
 8003706:	dc07      	bgt.n	8003718 <sin+0x20>
 8003708:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003798 <sin+0xa0>
 800370c:	2000      	movs	r0, #0
 800370e:	b005      	add	sp, #20
 8003710:	f85d eb04 	ldr.w	lr, [sp], #4
 8003714:	f000 be68 	b.w	80043e8 <__kernel_sin>
 8003718:	4822      	ldr	r0, [pc, #136]	; (80037a4 <sin+0xac>)
 800371a:	4281      	cmp	r1, r0
 800371c:	dd09      	ble.n	8003732 <sin+0x3a>
 800371e:	ee10 0a10 	vmov	r0, s0
 8003722:	4619      	mov	r1, r3
 8003724:	f7fc fd7c 	bl	8000220 <__aeabi_dsub>
 8003728:	ec41 0b10 	vmov	d0, r0, r1
 800372c:	b005      	add	sp, #20
 800372e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003732:	4668      	mov	r0, sp
 8003734:	f000 f838 	bl	80037a8 <__ieee754_rem_pio2>
 8003738:	f000 0003 	and.w	r0, r0, #3
 800373c:	2801      	cmp	r0, #1
 800373e:	d00c      	beq.n	800375a <sin+0x62>
 8003740:	2802      	cmp	r0, #2
 8003742:	d011      	beq.n	8003768 <sin+0x70>
 8003744:	b9f0      	cbnz	r0, 8003784 <sin+0x8c>
 8003746:	ed9d 1b02 	vldr	d1, [sp, #8]
 800374a:	ed9d 0b00 	vldr	d0, [sp]
 800374e:	2001      	movs	r0, #1
 8003750:	f000 fe4a 	bl	80043e8 <__kernel_sin>
 8003754:	ec51 0b10 	vmov	r0, r1, d0
 8003758:	e7e6      	b.n	8003728 <sin+0x30>
 800375a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800375e:	ed9d 0b00 	vldr	d0, [sp]
 8003762:	f000 fd79 	bl	8004258 <__kernel_cos>
 8003766:	e7f5      	b.n	8003754 <sin+0x5c>
 8003768:	ed9d 1b02 	vldr	d1, [sp, #8]
 800376c:	ed9d 0b00 	vldr	d0, [sp]
 8003770:	2001      	movs	r0, #1
 8003772:	f000 fe39 	bl	80043e8 <__kernel_sin>
 8003776:	ec53 2b10 	vmov	r2, r3, d0
 800377a:	ee10 0a10 	vmov	r0, s0
 800377e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003782:	e7d1      	b.n	8003728 <sin+0x30>
 8003784:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003788:	ed9d 0b00 	vldr	d0, [sp]
 800378c:	f000 fd64 	bl	8004258 <__kernel_cos>
 8003790:	e7f1      	b.n	8003776 <sin+0x7e>
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
	...
 80037a0:	3fe921fb 	.word	0x3fe921fb
 80037a4:	7fefffff 	.word	0x7fefffff

080037a8 <__ieee754_rem_pio2>:
 80037a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ac:	ed2d 8b02 	vpush	{d8}
 80037b0:	ec55 4b10 	vmov	r4, r5, d0
 80037b4:	4bca      	ldr	r3, [pc, #808]	; (8003ae0 <__ieee754_rem_pio2+0x338>)
 80037b6:	b08b      	sub	sp, #44	; 0x2c
 80037b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80037bc:	4598      	cmp	r8, r3
 80037be:	4682      	mov	sl, r0
 80037c0:	9502      	str	r5, [sp, #8]
 80037c2:	dc08      	bgt.n	80037d6 <__ieee754_rem_pio2+0x2e>
 80037c4:	2200      	movs	r2, #0
 80037c6:	2300      	movs	r3, #0
 80037c8:	ed80 0b00 	vstr	d0, [r0]
 80037cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80037d0:	f04f 0b00 	mov.w	fp, #0
 80037d4:	e028      	b.n	8003828 <__ieee754_rem_pio2+0x80>
 80037d6:	4bc3      	ldr	r3, [pc, #780]	; (8003ae4 <__ieee754_rem_pio2+0x33c>)
 80037d8:	4598      	cmp	r8, r3
 80037da:	dc78      	bgt.n	80038ce <__ieee754_rem_pio2+0x126>
 80037dc:	9b02      	ldr	r3, [sp, #8]
 80037de:	4ec2      	ldr	r6, [pc, #776]	; (8003ae8 <__ieee754_rem_pio2+0x340>)
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	ee10 0a10 	vmov	r0, s0
 80037e6:	a3b0      	add	r3, pc, #704	; (adr r3, 8003aa8 <__ieee754_rem_pio2+0x300>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	4629      	mov	r1, r5
 80037ee:	dd39      	ble.n	8003864 <__ieee754_rem_pio2+0xbc>
 80037f0:	f7fc fd16 	bl	8000220 <__aeabi_dsub>
 80037f4:	45b0      	cmp	r8, r6
 80037f6:	4604      	mov	r4, r0
 80037f8:	460d      	mov	r5, r1
 80037fa:	d01b      	beq.n	8003834 <__ieee754_rem_pio2+0x8c>
 80037fc:	a3ac      	add	r3, pc, #688	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x308>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fd0d 	bl	8000220 <__aeabi_dsub>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	e9ca 2300 	strd	r2, r3, [sl]
 800380e:	4620      	mov	r0, r4
 8003810:	4629      	mov	r1, r5
 8003812:	f7fc fd05 	bl	8000220 <__aeabi_dsub>
 8003816:	a3a6      	add	r3, pc, #664	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x308>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fd00 	bl	8000220 <__aeabi_dsub>
 8003820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003824:	f04f 0b01 	mov.w	fp, #1
 8003828:	4658      	mov	r0, fp
 800382a:	b00b      	add	sp, #44	; 0x2c
 800382c:	ecbd 8b02 	vpop	{d8}
 8003830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003834:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x310>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc fcf1 	bl	8000220 <__aeabi_dsub>
 800383e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x318>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	4604      	mov	r4, r0
 8003846:	460d      	mov	r5, r1
 8003848:	f7fc fcea 	bl	8000220 <__aeabi_dsub>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	e9ca 2300 	strd	r2, r3, [sl]
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fce2 	bl	8000220 <__aeabi_dsub>
 800385c:	a398      	add	r3, pc, #608	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x318>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	e7db      	b.n	800381c <__ieee754_rem_pio2+0x74>
 8003864:	f7fc fcde 	bl	8000224 <__adddf3>
 8003868:	45b0      	cmp	r8, r6
 800386a:	4604      	mov	r4, r0
 800386c:	460d      	mov	r5, r1
 800386e:	d016      	beq.n	800389e <__ieee754_rem_pio2+0xf6>
 8003870:	a38f      	add	r3, pc, #572	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x308>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc fcd5 	bl	8000224 <__adddf3>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	e9ca 2300 	strd	r2, r3, [sl]
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fc fccb 	bl	8000220 <__aeabi_dsub>
 800388a:	a389      	add	r3, pc, #548	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x308>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f7fc fcc8 	bl	8000224 <__adddf3>
 8003894:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003898:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800389c:	e7c4      	b.n	8003828 <__ieee754_rem_pio2+0x80>
 800389e:	a386      	add	r3, pc, #536	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x310>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f7fc fcbe 	bl	8000224 <__adddf3>
 80038a8:	a385      	add	r3, pc, #532	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x318>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
 80038b2:	f7fc fcb7 	bl	8000224 <__adddf3>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	e9ca 2300 	strd	r2, r3, [sl]
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	f7fc fcad 	bl	8000220 <__aeabi_dsub>
 80038c6:	a37e      	add	r3, pc, #504	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x318>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	e7e0      	b.n	8003890 <__ieee754_rem_pio2+0xe8>
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <__ieee754_rem_pio2+0x344>)
 80038d0:	4598      	cmp	r8, r3
 80038d2:	f300 80d8 	bgt.w	8003a86 <__ieee754_rem_pio2+0x2de>
 80038d6:	f000 fe45 	bl	8004564 <fabs>
 80038da:	ec55 4b10 	vmov	r4, r5, d0
 80038de:	ee10 0a10 	vmov	r0, s0
 80038e2:	a379      	add	r3, pc, #484	; (adr r3, 8003ac8 <__ieee754_rem_pio2+0x320>)
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	4629      	mov	r1, r5
 80038ea:	f7fc fe51 	bl	8000590 <__aeabi_dmul>
 80038ee:	4b80      	ldr	r3, [pc, #512]	; (8003af0 <__ieee754_rem_pio2+0x348>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	f7fc fc97 	bl	8000224 <__adddf3>
 80038f6:	f7fd f8e5 	bl	8000ac4 <__aeabi_d2iz>
 80038fa:	4683      	mov	fp, r0
 80038fc:	f7fc fdde 	bl	80004bc <__aeabi_i2d>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	ec43 2b18 	vmov	d8, r2, r3
 8003908:	a367      	add	r3, pc, #412	; (adr r3, 8003aa8 <__ieee754_rem_pio2+0x300>)
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f7fc fe3f 	bl	8000590 <__aeabi_dmul>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fc81 	bl	8000220 <__aeabi_dsub>
 800391e:	a364      	add	r3, pc, #400	; (adr r3, 8003ab0 <__ieee754_rem_pio2+0x308>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	4606      	mov	r6, r0
 8003926:	460f      	mov	r7, r1
 8003928:	ec51 0b18 	vmov	r0, r1, d8
 800392c:	f7fc fe30 	bl	8000590 <__aeabi_dmul>
 8003930:	f1bb 0f1f 	cmp.w	fp, #31
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	dc0d      	bgt.n	8003956 <__ieee754_rem_pio2+0x1ae>
 800393a:	4b6e      	ldr	r3, [pc, #440]	; (8003af4 <__ieee754_rem_pio2+0x34c>)
 800393c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	4543      	cmp	r3, r8
 8003946:	d006      	beq.n	8003956 <__ieee754_rem_pio2+0x1ae>
 8003948:	4622      	mov	r2, r4
 800394a:	462b      	mov	r3, r5
 800394c:	4630      	mov	r0, r6
 800394e:	4639      	mov	r1, r7
 8003950:	f7fc fc66 	bl	8000220 <__aeabi_dsub>
 8003954:	e00e      	b.n	8003974 <__ieee754_rem_pio2+0x1cc>
 8003956:	462b      	mov	r3, r5
 8003958:	4622      	mov	r2, r4
 800395a:	4630      	mov	r0, r6
 800395c:	4639      	mov	r1, r7
 800395e:	f7fc fc5f 	bl	8000220 <__aeabi_dsub>
 8003962:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800396c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003970:	2b10      	cmp	r3, #16
 8003972:	dc02      	bgt.n	800397a <__ieee754_rem_pio2+0x1d2>
 8003974:	e9ca 0100 	strd	r0, r1, [sl]
 8003978:	e039      	b.n	80039ee <__ieee754_rem_pio2+0x246>
 800397a:	a34f      	add	r3, pc, #316	; (adr r3, 8003ab8 <__ieee754_rem_pio2+0x310>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	ec51 0b18 	vmov	r0, r1, d8
 8003984:	f7fc fe04 	bl	8000590 <__aeabi_dmul>
 8003988:	4604      	mov	r4, r0
 800398a:	460d      	mov	r5, r1
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4630      	mov	r0, r6
 8003992:	4639      	mov	r1, r7
 8003994:	f7fc fc44 	bl	8000220 <__aeabi_dsub>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4680      	mov	r8, r0
 800399e:	4689      	mov	r9, r1
 80039a0:	4630      	mov	r0, r6
 80039a2:	4639      	mov	r1, r7
 80039a4:	f7fc fc3c 	bl	8000220 <__aeabi_dsub>
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	f7fc fc38 	bl	8000220 <__aeabi_dsub>
 80039b0:	a343      	add	r3, pc, #268	; (adr r3, 8003ac0 <__ieee754_rem_pio2+0x318>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	4604      	mov	r4, r0
 80039b8:	460d      	mov	r5, r1
 80039ba:	ec51 0b18 	vmov	r0, r1, d8
 80039be:	f7fc fde7 	bl	8000590 <__aeabi_dmul>
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f7fc fc2b 	bl	8000220 <__aeabi_dsub>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4604      	mov	r4, r0
 80039d0:	460d      	mov	r5, r1
 80039d2:	4640      	mov	r0, r8
 80039d4:	4649      	mov	r1, r9
 80039d6:	f7fc fc23 	bl	8000220 <__aeabi_dsub>
 80039da:	9a03      	ldr	r2, [sp, #12]
 80039dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b31      	cmp	r3, #49	; 0x31
 80039e4:	dc24      	bgt.n	8003a30 <__ieee754_rem_pio2+0x288>
 80039e6:	e9ca 0100 	strd	r0, r1, [sl]
 80039ea:	4646      	mov	r6, r8
 80039ec:	464f      	mov	r7, r9
 80039ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80039f2:	4630      	mov	r0, r6
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	4639      	mov	r1, r7
 80039fa:	f7fc fc11 	bl	8000220 <__aeabi_dsub>
 80039fe:	462b      	mov	r3, r5
 8003a00:	4622      	mov	r2, r4
 8003a02:	f7fc fc0d 	bl	8000220 <__aeabi_dsub>
 8003a06:	9b02      	ldr	r3, [sp, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a0e:	f6bf af0b 	bge.w	8003828 <__ieee754_rem_pio2+0x80>
 8003a12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003a16:	f8ca 3004 	str.w	r3, [sl, #4]
 8003a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a1e:	f8ca 8000 	str.w	r8, [sl]
 8003a22:	f8ca 0008 	str.w	r0, [sl, #8]
 8003a26:	f8ca 300c 	str.w	r3, [sl, #12]
 8003a2a:	f1cb 0b00 	rsb	fp, fp, #0
 8003a2e:	e6fb      	b.n	8003828 <__ieee754_rem_pio2+0x80>
 8003a30:	a327      	add	r3, pc, #156	; (adr r3, 8003ad0 <__ieee754_rem_pio2+0x328>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	ec51 0b18 	vmov	r0, r1, d8
 8003a3a:	f7fc fda9 	bl	8000590 <__aeabi_dmul>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460d      	mov	r5, r1
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4640      	mov	r0, r8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	f7fc fbe9 	bl	8000220 <__aeabi_dsub>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	4640      	mov	r0, r8
 8003a58:	4649      	mov	r1, r9
 8003a5a:	f7fc fbe1 	bl	8000220 <__aeabi_dsub>
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	f7fc fbdd 	bl	8000220 <__aeabi_dsub>
 8003a66:	a31c      	add	r3, pc, #112	; (adr r3, 8003ad8 <__ieee754_rem_pio2+0x330>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	460d      	mov	r5, r1
 8003a70:	ec51 0b18 	vmov	r0, r1, d8
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	4622      	mov	r2, r4
 8003a7a:	462b      	mov	r3, r5
 8003a7c:	f7fc fbd0 	bl	8000220 <__aeabi_dsub>
 8003a80:	4604      	mov	r4, r0
 8003a82:	460d      	mov	r5, r1
 8003a84:	e760      	b.n	8003948 <__ieee754_rem_pio2+0x1a0>
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <__ieee754_rem_pio2+0x350>)
 8003a88:	4598      	cmp	r8, r3
 8003a8a:	dd37      	ble.n	8003afc <__ieee754_rem_pio2+0x354>
 8003a8c:	ee10 2a10 	vmov	r2, s0
 8003a90:	462b      	mov	r3, r5
 8003a92:	4620      	mov	r0, r4
 8003a94:	4629      	mov	r1, r5
 8003a96:	f7fc fbc3 	bl	8000220 <__aeabi_dsub>
 8003a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a9e:	e9ca 0100 	strd	r0, r1, [sl]
 8003aa2:	e695      	b.n	80037d0 <__ieee754_rem_pio2+0x28>
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	54400000 	.word	0x54400000
 8003aac:	3ff921fb 	.word	0x3ff921fb
 8003ab0:	1a626331 	.word	0x1a626331
 8003ab4:	3dd0b461 	.word	0x3dd0b461
 8003ab8:	1a600000 	.word	0x1a600000
 8003abc:	3dd0b461 	.word	0x3dd0b461
 8003ac0:	2e037073 	.word	0x2e037073
 8003ac4:	3ba3198a 	.word	0x3ba3198a
 8003ac8:	6dc9c883 	.word	0x6dc9c883
 8003acc:	3fe45f30 	.word	0x3fe45f30
 8003ad0:	2e000000 	.word	0x2e000000
 8003ad4:	3ba3198a 	.word	0x3ba3198a
 8003ad8:	252049c1 	.word	0x252049c1
 8003adc:	397b839a 	.word	0x397b839a
 8003ae0:	3fe921fb 	.word	0x3fe921fb
 8003ae4:	4002d97b 	.word	0x4002d97b
 8003ae8:	3ff921fb 	.word	0x3ff921fb
 8003aec:	413921fb 	.word	0x413921fb
 8003af0:	3fe00000 	.word	0x3fe00000
 8003af4:	080047a0 	.word	0x080047a0
 8003af8:	7fefffff 	.word	0x7fefffff
 8003afc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003b00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003b04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003b08:	4620      	mov	r0, r4
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	f7fc ffda 	bl	8000ac4 <__aeabi_d2iz>
 8003b10:	f7fc fcd4 	bl	80004bc <__aeabi_i2d>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b20:	f7fc fb7e 	bl	8000220 <__aeabi_dsub>
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <__ieee754_rem_pio2+0x404>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	f7fc fd32 	bl	8000590 <__aeabi_dmul>
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	4604      	mov	r4, r0
 8003b30:	f7fc ffc8 	bl	8000ac4 <__aeabi_d2iz>
 8003b34:	f7fc fcc2 	bl	80004bc <__aeabi_i2d>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b44:	f7fc fb6c 	bl	8000220 <__aeabi_dsub>
 8003b48:	4b18      	ldr	r3, [pc, #96]	; (8003bac <__ieee754_rem_pio2+0x404>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f7fc fd20 	bl	8000590 <__aeabi_dmul>
 8003b50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003b58:	2703      	movs	r7, #3
 8003b5a:	2400      	movs	r4, #0
 8003b5c:	2500      	movs	r5, #0
 8003b5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8003b62:	4622      	mov	r2, r4
 8003b64:	462b      	mov	r3, r5
 8003b66:	46b9      	mov	r9, r7
 8003b68:	3f01      	subs	r7, #1
 8003b6a:	f7fc ff79 	bl	8000a60 <__aeabi_dcmpeq>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d1f5      	bne.n	8003b5e <__ieee754_rem_pio2+0x3b6>
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <__ieee754_rem_pio2+0x408>)
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2302      	movs	r3, #2
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	4651      	mov	r1, sl
 8003b80:	a804      	add	r0, sp, #16
 8003b82:	f000 f819 	bl	8003bb8 <__kernel_rem_pio2>
 8003b86:	9b02      	ldr	r3, [sp, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	4683      	mov	fp, r0
 8003b8c:	f6bf ae4c 	bge.w	8003828 <__ieee754_rem_pio2+0x80>
 8003b90:	e9da 2100 	ldrd	r2, r1, [sl]
 8003b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b98:	e9ca 2300 	strd	r2, r3, [sl]
 8003b9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003ba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ba4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003ba8:	e73f      	b.n	8003a2a <__ieee754_rem_pio2+0x282>
 8003baa:	bf00      	nop
 8003bac:	41700000 	.word	0x41700000
 8003bb0:	08004820 	.word	0x08004820
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <__kernel_rem_pio2>:
 8003bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bbc:	ed2d 8b02 	vpush	{d8}
 8003bc0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003bc4:	f112 0f14 	cmn.w	r2, #20
 8003bc8:	9306      	str	r3, [sp, #24]
 8003bca:	9104      	str	r1, [sp, #16]
 8003bcc:	4bc2      	ldr	r3, [pc, #776]	; (8003ed8 <__kernel_rem_pio2+0x320>)
 8003bce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003bd0:	9009      	str	r0, [sp, #36]	; 0x24
 8003bd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	9b06      	ldr	r3, [sp, #24]
 8003bda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003bde:	bfa8      	it	ge
 8003be0:	1ed4      	subge	r4, r2, #3
 8003be2:	9305      	str	r3, [sp, #20]
 8003be4:	bfb2      	itee	lt
 8003be6:	2400      	movlt	r4, #0
 8003be8:	2318      	movge	r3, #24
 8003bea:	fb94 f4f3 	sdivge	r4, r4, r3
 8003bee:	f06f 0317 	mvn.w	r3, #23
 8003bf2:	fb04 3303 	mla	r3, r4, r3, r3
 8003bf6:	eb03 0a02 	add.w	sl, r3, r2
 8003bfa:	9b00      	ldr	r3, [sp, #0]
 8003bfc:	9a05      	ldr	r2, [sp, #20]
 8003bfe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003ec8 <__kernel_rem_pio2+0x310>
 8003c02:	eb03 0802 	add.w	r8, r3, r2
 8003c06:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003c08:	1aa7      	subs	r7, r4, r2
 8003c0a:	ae20      	add	r6, sp, #128	; 0x80
 8003c0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003c10:	2500      	movs	r5, #0
 8003c12:	4545      	cmp	r5, r8
 8003c14:	dd13      	ble.n	8003c3e <__kernel_rem_pio2+0x86>
 8003c16:	9b06      	ldr	r3, [sp, #24]
 8003c18:	aa20      	add	r2, sp, #128	; 0x80
 8003c1a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003c1e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003c22:	f04f 0800 	mov.w	r8, #0
 8003c26:	9b00      	ldr	r3, [sp, #0]
 8003c28:	4598      	cmp	r8, r3
 8003c2a:	dc31      	bgt.n	8003c90 <__kernel_rem_pio2+0xd8>
 8003c2c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003ec8 <__kernel_rem_pio2+0x310>
 8003c30:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003c34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003c38:	462f      	mov	r7, r5
 8003c3a:	2600      	movs	r6, #0
 8003c3c:	e01b      	b.n	8003c76 <__kernel_rem_pio2+0xbe>
 8003c3e:	42ef      	cmn	r7, r5
 8003c40:	d407      	bmi.n	8003c52 <__kernel_rem_pio2+0x9a>
 8003c42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003c46:	f7fc fc39 	bl	80004bc <__aeabi_i2d>
 8003c4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003c4e:	3501      	adds	r5, #1
 8003c50:	e7df      	b.n	8003c12 <__kernel_rem_pio2+0x5a>
 8003c52:	ec51 0b18 	vmov	r0, r1, d8
 8003c56:	e7f8      	b.n	8003c4a <__kernel_rem_pio2+0x92>
 8003c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003c60:	f7fc fc96 	bl	8000590 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6c:	f7fc fada 	bl	8000224 <__adddf3>
 8003c70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c74:	3601      	adds	r6, #1
 8003c76:	9b05      	ldr	r3, [sp, #20]
 8003c78:	429e      	cmp	r6, r3
 8003c7a:	f1a7 0708 	sub.w	r7, r7, #8
 8003c7e:	ddeb      	ble.n	8003c58 <__kernel_rem_pio2+0xa0>
 8003c80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c84:	f108 0801 	add.w	r8, r8, #1
 8003c88:	ecab 7b02 	vstmia	fp!, {d7}
 8003c8c:	3508      	adds	r5, #8
 8003c8e:	e7ca      	b.n	8003c26 <__kernel_rem_pio2+0x6e>
 8003c90:	9b00      	ldr	r3, [sp, #0]
 8003c92:	aa0c      	add	r2, sp, #48	; 0x30
 8003c94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c9a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003c9c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ca0:	9c00      	ldr	r4, [sp, #0]
 8003ca2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ca4:	00e3      	lsls	r3, r4, #3
 8003ca6:	9308      	str	r3, [sp, #32]
 8003ca8:	ab98      	add	r3, sp, #608	; 0x260
 8003caa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003cae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003cb2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003cb6:	ab70      	add	r3, sp, #448	; 0x1c0
 8003cb8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003cbc:	46c3      	mov	fp, r8
 8003cbe:	46a1      	mov	r9, r4
 8003cc0:	f1b9 0f00 	cmp.w	r9, #0
 8003cc4:	f1a5 0508 	sub.w	r5, r5, #8
 8003cc8:	dc77      	bgt.n	8003dba <__kernel_rem_pio2+0x202>
 8003cca:	ec47 6b10 	vmov	d0, r6, r7
 8003cce:	4650      	mov	r0, sl
 8003cd0:	f000 fc52 	bl	8004578 <scalbn>
 8003cd4:	ec57 6b10 	vmov	r6, r7, d0
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003cde:	ee10 0a10 	vmov	r0, s0
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fc54 	bl	8000590 <__aeabi_dmul>
 8003ce8:	ec41 0b10 	vmov	d0, r0, r1
 8003cec:	f000 fcc4 	bl	8004678 <floor>
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	; (8003edc <__kernel_rem_pio2+0x324>)
 8003cf2:	ec51 0b10 	vmov	r0, r1, d0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f7fc fc4a 	bl	8000590 <__aeabi_dmul>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4630      	mov	r0, r6
 8003d02:	4639      	mov	r1, r7
 8003d04:	f7fc fa8c 	bl	8000220 <__aeabi_dsub>
 8003d08:	460f      	mov	r7, r1
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	f7fc feda 	bl	8000ac4 <__aeabi_d2iz>
 8003d10:	9002      	str	r0, [sp, #8]
 8003d12:	f7fc fbd3 	bl	80004bc <__aeabi_i2d>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	f7fc fa7f 	bl	8000220 <__aeabi_dsub>
 8003d22:	f1ba 0f00 	cmp.w	sl, #0
 8003d26:	4606      	mov	r6, r0
 8003d28:	460f      	mov	r7, r1
 8003d2a:	dd6d      	ble.n	8003e08 <__kernel_rem_pio2+0x250>
 8003d2c:	1e61      	subs	r1, r4, #1
 8003d2e:	ab0c      	add	r3, sp, #48	; 0x30
 8003d30:	9d02      	ldr	r5, [sp, #8]
 8003d32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d36:	f1ca 0018 	rsb	r0, sl, #24
 8003d3a:	fa43 f200 	asr.w	r2, r3, r0
 8003d3e:	4415      	add	r5, r2
 8003d40:	4082      	lsls	r2, r0
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	aa0c      	add	r2, sp, #48	; 0x30
 8003d46:	9502      	str	r5, [sp, #8]
 8003d48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003d4c:	f1ca 0217 	rsb	r2, sl, #23
 8003d50:	fa43 fb02 	asr.w	fp, r3, r2
 8003d54:	f1bb 0f00 	cmp.w	fp, #0
 8003d58:	dd65      	ble.n	8003e26 <__kernel_rem_pio2+0x26e>
 8003d5a:	9b02      	ldr	r3, [sp, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	3301      	adds	r3, #1
 8003d60:	9302      	str	r3, [sp, #8]
 8003d62:	4615      	mov	r5, r2
 8003d64:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003d68:	4294      	cmp	r4, r2
 8003d6a:	f300 809f 	bgt.w	8003eac <__kernel_rem_pio2+0x2f4>
 8003d6e:	f1ba 0f00 	cmp.w	sl, #0
 8003d72:	dd07      	ble.n	8003d84 <__kernel_rem_pio2+0x1cc>
 8003d74:	f1ba 0f01 	cmp.w	sl, #1
 8003d78:	f000 80c1 	beq.w	8003efe <__kernel_rem_pio2+0x346>
 8003d7c:	f1ba 0f02 	cmp.w	sl, #2
 8003d80:	f000 80c7 	beq.w	8003f12 <__kernel_rem_pio2+0x35a>
 8003d84:	f1bb 0f02 	cmp.w	fp, #2
 8003d88:	d14d      	bne.n	8003e26 <__kernel_rem_pio2+0x26e>
 8003d8a:	4632      	mov	r2, r6
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4954      	ldr	r1, [pc, #336]	; (8003ee0 <__kernel_rem_pio2+0x328>)
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fc fa45 	bl	8000220 <__aeabi_dsub>
 8003d96:	4606      	mov	r6, r0
 8003d98:	460f      	mov	r7, r1
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	d043      	beq.n	8003e26 <__kernel_rem_pio2+0x26e>
 8003d9e:	4650      	mov	r0, sl
 8003da0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003ed0 <__kernel_rem_pio2+0x318>
 8003da4:	f000 fbe8 	bl	8004578 <scalbn>
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	ec53 2b10 	vmov	r2, r3, d0
 8003db0:	f7fc fa36 	bl	8000220 <__aeabi_dsub>
 8003db4:	4606      	mov	r6, r0
 8003db6:	460f      	mov	r7, r1
 8003db8:	e035      	b.n	8003e26 <__kernel_rem_pio2+0x26e>
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <__kernel_rem_pio2+0x32c>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	f7fc fbe5 	bl	8000590 <__aeabi_dmul>
 8003dc6:	f7fc fe7d 	bl	8000ac4 <__aeabi_d2iz>
 8003dca:	f7fc fb77 	bl	80004bc <__aeabi_i2d>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	ec43 2b18 	vmov	d8, r2, r3
 8003dd6:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <__kernel_rem_pio2+0x330>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f7fc fbd9 	bl	8000590 <__aeabi_dmul>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4630      	mov	r0, r6
 8003de4:	4639      	mov	r1, r7
 8003de6:	f7fc fa1b 	bl	8000220 <__aeabi_dsub>
 8003dea:	f7fc fe6b 	bl	8000ac4 <__aeabi_d2iz>
 8003dee:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003df2:	f84b 0b04 	str.w	r0, [fp], #4
 8003df6:	ec51 0b18 	vmov	r0, r1, d8
 8003dfa:	f7fc fa13 	bl	8000224 <__adddf3>
 8003dfe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003e02:	4606      	mov	r6, r0
 8003e04:	460f      	mov	r7, r1
 8003e06:	e75b      	b.n	8003cc0 <__kernel_rem_pio2+0x108>
 8003e08:	d106      	bne.n	8003e18 <__kernel_rem_pio2+0x260>
 8003e0a:	1e63      	subs	r3, r4, #1
 8003e0c:	aa0c      	add	r2, sp, #48	; 0x30
 8003e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e12:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8003e16:	e79d      	b.n	8003d54 <__kernel_rem_pio2+0x19c>
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <__kernel_rem_pio2+0x334>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f7fc fe3e 	bl	8000a9c <__aeabi_dcmpge>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d140      	bne.n	8003ea6 <__kernel_rem_pio2+0x2ee>
 8003e24:	4683      	mov	fp, r0
 8003e26:	2200      	movs	r2, #0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	f7fc fe17 	bl	8000a60 <__aeabi_dcmpeq>
 8003e32:	2800      	cmp	r0, #0
 8003e34:	f000 80c1 	beq.w	8003fba <__kernel_rem_pio2+0x402>
 8003e38:	1e65      	subs	r5, r4, #1
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	9900      	ldr	r1, [sp, #0]
 8003e40:	428b      	cmp	r3, r1
 8003e42:	da6d      	bge.n	8003f20 <__kernel_rem_pio2+0x368>
 8003e44:	2a00      	cmp	r2, #0
 8003e46:	f000 808a 	beq.w	8003f5e <__kernel_rem_pio2+0x3a6>
 8003e4a:	ab0c      	add	r3, sp, #48	; 0x30
 8003e4c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003e50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80ae 	beq.w	8003fb6 <__kernel_rem_pio2+0x3fe>
 8003e5a:	4650      	mov	r0, sl
 8003e5c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003ed0 <__kernel_rem_pio2+0x318>
 8003e60:	f000 fb8a 	bl	8004578 <scalbn>
 8003e64:	1c6b      	adds	r3, r5, #1
 8003e66:	00da      	lsls	r2, r3, #3
 8003e68:	9205      	str	r2, [sp, #20]
 8003e6a:	ec57 6b10 	vmov	r6, r7, d0
 8003e6e:	aa70      	add	r2, sp, #448	; 0x1c0
 8003e70:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003ee4 <__kernel_rem_pio2+0x32c>
 8003e74:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8003e78:	462c      	mov	r4, r5
 8003e7a:	f04f 0800 	mov.w	r8, #0
 8003e7e:	2c00      	cmp	r4, #0
 8003e80:	f280 80d4 	bge.w	800402c <__kernel_rem_pio2+0x474>
 8003e84:	462c      	mov	r4, r5
 8003e86:	2c00      	cmp	r4, #0
 8003e88:	f2c0 8102 	blt.w	8004090 <__kernel_rem_pio2+0x4d8>
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <__kernel_rem_pio2+0x338>)
 8003e8e:	461e      	mov	r6, r3
 8003e90:	ab70      	add	r3, sp, #448	; 0x1c0
 8003e92:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8003e96:	1b2b      	subs	r3, r5, r4
 8003e98:	f04f 0900 	mov.w	r9, #0
 8003e9c:	f04f 0a00 	mov.w	sl, #0
 8003ea0:	2700      	movs	r7, #0
 8003ea2:	9306      	str	r3, [sp, #24]
 8003ea4:	e0e6      	b.n	8004074 <__kernel_rem_pio2+0x4bc>
 8003ea6:	f04f 0b02 	mov.w	fp, #2
 8003eaa:	e756      	b.n	8003d5a <__kernel_rem_pio2+0x1a2>
 8003eac:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb0:	bb05      	cbnz	r5, 8003ef4 <__kernel_rem_pio2+0x33c>
 8003eb2:	b123      	cbz	r3, 8003ebe <__kernel_rem_pio2+0x306>
 8003eb4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003eb8:	f8c8 3000 	str.w	r3, [r8]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	3201      	adds	r2, #1
 8003ec0:	f108 0804 	add.w	r8, r8, #4
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	e74f      	b.n	8003d68 <__kernel_rem_pio2+0x1b0>
	...
 8003ed4:	3ff00000 	.word	0x3ff00000
 8003ed8:	08004968 	.word	0x08004968
 8003edc:	40200000 	.word	0x40200000
 8003ee0:	3ff00000 	.word	0x3ff00000
 8003ee4:	3e700000 	.word	0x3e700000
 8003ee8:	41700000 	.word	0x41700000
 8003eec:	3fe00000 	.word	0x3fe00000
 8003ef0:	08004928 	.word	0x08004928
 8003ef4:	1acb      	subs	r3, r1, r3
 8003ef6:	f8c8 3000 	str.w	r3, [r8]
 8003efa:	462b      	mov	r3, r5
 8003efc:	e7df      	b.n	8003ebe <__kernel_rem_pio2+0x306>
 8003efe:	1e62      	subs	r2, r4, #1
 8003f00:	ab0c      	add	r3, sp, #48	; 0x30
 8003f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003f0a:	a90c      	add	r1, sp, #48	; 0x30
 8003f0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f10:	e738      	b.n	8003d84 <__kernel_rem_pio2+0x1cc>
 8003f12:	1e62      	subs	r2, r4, #1
 8003f14:	ab0c      	add	r3, sp, #48	; 0x30
 8003f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003f1e:	e7f4      	b.n	8003f0a <__kernel_rem_pio2+0x352>
 8003f20:	a90c      	add	r1, sp, #48	; 0x30
 8003f22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	e788      	b.n	8003e3e <__kernel_rem_pio2+0x286>
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d0fa      	beq.n	8003f2c <__kernel_rem_pio2+0x374>
 8003f36:	9a08      	ldr	r2, [sp, #32]
 8003f38:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8003f3c:	446a      	add	r2, sp
 8003f3e:	3a98      	subs	r2, #152	; 0x98
 8003f40:	9208      	str	r2, [sp, #32]
 8003f42:	9a06      	ldr	r2, [sp, #24]
 8003f44:	a920      	add	r1, sp, #128	; 0x80
 8003f46:	18a2      	adds	r2, r4, r2
 8003f48:	18e3      	adds	r3, r4, r3
 8003f4a:	f104 0801 	add.w	r8, r4, #1
 8003f4e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003f52:	9302      	str	r3, [sp, #8]
 8003f54:	9b02      	ldr	r3, [sp, #8]
 8003f56:	4543      	cmp	r3, r8
 8003f58:	da04      	bge.n	8003f64 <__kernel_rem_pio2+0x3ac>
 8003f5a:	461c      	mov	r4, r3
 8003f5c:	e6a2      	b.n	8003ca4 <__kernel_rem_pio2+0xec>
 8003f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f60:	2301      	movs	r3, #1
 8003f62:	e7e4      	b.n	8003f2e <__kernel_rem_pio2+0x376>
 8003f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f6a:	f7fc faa7 	bl	80004bc <__aeabi_i2d>
 8003f6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f74:	46ab      	mov	fp, r5
 8003f76:	461c      	mov	r4, r3
 8003f78:	f04f 0900 	mov.w	r9, #0
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	2700      	movs	r7, #0
 8003f80:	9b05      	ldr	r3, [sp, #20]
 8003f82:	4599      	cmp	r9, r3
 8003f84:	dd06      	ble.n	8003f94 <__kernel_rem_pio2+0x3dc>
 8003f86:	9b08      	ldr	r3, [sp, #32]
 8003f88:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003f8c:	f108 0801 	add.w	r8, r8, #1
 8003f90:	9308      	str	r3, [sp, #32]
 8003f92:	e7df      	b.n	8003f54 <__kernel_rem_pio2+0x39c>
 8003f94:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003f98:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003f9c:	f7fc faf8 	bl	8000590 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f7fc f93c 	bl	8000224 <__adddf3>
 8003fac:	f109 0901 	add.w	r9, r9, #1
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	460f      	mov	r7, r1
 8003fb4:	e7e4      	b.n	8003f80 <__kernel_rem_pio2+0x3c8>
 8003fb6:	3d01      	subs	r5, #1
 8003fb8:	e747      	b.n	8003e4a <__kernel_rem_pio2+0x292>
 8003fba:	ec47 6b10 	vmov	d0, r6, r7
 8003fbe:	f1ca 0000 	rsb	r0, sl, #0
 8003fc2:	f000 fad9 	bl	8004578 <scalbn>
 8003fc6:	ec57 6b10 	vmov	r6, r7, d0
 8003fca:	4ba0      	ldr	r3, [pc, #640]	; (800424c <__kernel_rem_pio2+0x694>)
 8003fcc:	ee10 0a10 	vmov	r0, s0
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	f7fc fd62 	bl	8000a9c <__aeabi_dcmpge>
 8003fd8:	b1f8      	cbz	r0, 800401a <__kernel_rem_pio2+0x462>
 8003fda:	4b9d      	ldr	r3, [pc, #628]	; (8004250 <__kernel_rem_pio2+0x698>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4630      	mov	r0, r6
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	f7fc fad5 	bl	8000590 <__aeabi_dmul>
 8003fe6:	f7fc fd6d 	bl	8000ac4 <__aeabi_d2iz>
 8003fea:	4680      	mov	r8, r0
 8003fec:	f7fc fa66 	bl	80004bc <__aeabi_i2d>
 8003ff0:	4b96      	ldr	r3, [pc, #600]	; (800424c <__kernel_rem_pio2+0x694>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f7fc facc 	bl	8000590 <__aeabi_dmul>
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7fc f90e 	bl	8000220 <__aeabi_dsub>
 8004004:	f7fc fd5e 	bl	8000ac4 <__aeabi_d2iz>
 8004008:	1c65      	adds	r5, r4, #1
 800400a:	ab0c      	add	r3, sp, #48	; 0x30
 800400c:	f10a 0a18 	add.w	sl, sl, #24
 8004010:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004014:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004018:	e71f      	b.n	8003e5a <__kernel_rem_pio2+0x2a2>
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	f7fc fd51 	bl	8000ac4 <__aeabi_d2iz>
 8004022:	ab0c      	add	r3, sp, #48	; 0x30
 8004024:	4625      	mov	r5, r4
 8004026:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800402a:	e716      	b.n	8003e5a <__kernel_rem_pio2+0x2a2>
 800402c:	ab0c      	add	r3, sp, #48	; 0x30
 800402e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004032:	f7fc fa43 	bl	80004bc <__aeabi_i2d>
 8004036:	4632      	mov	r2, r6
 8004038:	463b      	mov	r3, r7
 800403a:	f7fc faa9 	bl	8000590 <__aeabi_dmul>
 800403e:	4642      	mov	r2, r8
 8004040:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004044:	464b      	mov	r3, r9
 8004046:	4630      	mov	r0, r6
 8004048:	4639      	mov	r1, r7
 800404a:	f7fc faa1 	bl	8000590 <__aeabi_dmul>
 800404e:	3c01      	subs	r4, #1
 8004050:	4606      	mov	r6, r0
 8004052:	460f      	mov	r7, r1
 8004054:	e713      	b.n	8003e7e <__kernel_rem_pio2+0x2c6>
 8004056:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800405a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800405e:	f7fc fa97 	bl	8000590 <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4648      	mov	r0, r9
 8004068:	4651      	mov	r1, sl
 800406a:	f7fc f8db 	bl	8000224 <__adddf3>
 800406e:	3701      	adds	r7, #1
 8004070:	4681      	mov	r9, r0
 8004072:	468a      	mov	sl, r1
 8004074:	9b00      	ldr	r3, [sp, #0]
 8004076:	429f      	cmp	r7, r3
 8004078:	dc02      	bgt.n	8004080 <__kernel_rem_pio2+0x4c8>
 800407a:	9b06      	ldr	r3, [sp, #24]
 800407c:	429f      	cmp	r7, r3
 800407e:	ddea      	ble.n	8004056 <__kernel_rem_pio2+0x49e>
 8004080:	9a06      	ldr	r2, [sp, #24]
 8004082:	ab48      	add	r3, sp, #288	; 0x120
 8004084:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004088:	e9c6 9a00 	strd	r9, sl, [r6]
 800408c:	3c01      	subs	r4, #1
 800408e:	e6fa      	b.n	8003e86 <__kernel_rem_pio2+0x2ce>
 8004090:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004092:	2b02      	cmp	r3, #2
 8004094:	dc0b      	bgt.n	80040ae <__kernel_rem_pio2+0x4f6>
 8004096:	2b00      	cmp	r3, #0
 8004098:	dc39      	bgt.n	800410e <__kernel_rem_pio2+0x556>
 800409a:	d05d      	beq.n	8004158 <__kernel_rem_pio2+0x5a0>
 800409c:	9b02      	ldr	r3, [sp, #8]
 800409e:	f003 0007 	and.w	r0, r3, #7
 80040a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80040a6:	ecbd 8b02 	vpop	{d8}
 80040aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d1f3      	bne.n	800409c <__kernel_rem_pio2+0x4e4>
 80040b4:	9b05      	ldr	r3, [sp, #20]
 80040b6:	9500      	str	r5, [sp, #0]
 80040b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80040bc:	eb0d 0403 	add.w	r4, sp, r3
 80040c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80040c4:	46a2      	mov	sl, r4
 80040c6:	9b00      	ldr	r3, [sp, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80040ce:	dc69      	bgt.n	80041a4 <__kernel_rem_pio2+0x5ec>
 80040d0:	46aa      	mov	sl, r5
 80040d2:	f1ba 0f01 	cmp.w	sl, #1
 80040d6:	f1a4 0408 	sub.w	r4, r4, #8
 80040da:	f300 8083 	bgt.w	80041e4 <__kernel_rem_pio2+0x62c>
 80040de:	9c05      	ldr	r4, [sp, #20]
 80040e0:	ab48      	add	r3, sp, #288	; 0x120
 80040e2:	441c      	add	r4, r3
 80040e4:	2000      	movs	r0, #0
 80040e6:	2100      	movs	r1, #0
 80040e8:	2d01      	cmp	r5, #1
 80040ea:	f300 809a 	bgt.w	8004222 <__kernel_rem_pio2+0x66a>
 80040ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80040f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80040f6:	f1bb 0f00 	cmp.w	fp, #0
 80040fa:	f040 8098 	bne.w	800422e <__kernel_rem_pio2+0x676>
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	e9c3 7800 	strd	r7, r8, [r3]
 8004104:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004108:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800410c:	e7c6      	b.n	800409c <__kernel_rem_pio2+0x4e4>
 800410e:	9e05      	ldr	r6, [sp, #20]
 8004110:	ab48      	add	r3, sp, #288	; 0x120
 8004112:	441e      	add	r6, r3
 8004114:	462c      	mov	r4, r5
 8004116:	2000      	movs	r0, #0
 8004118:	2100      	movs	r1, #0
 800411a:	2c00      	cmp	r4, #0
 800411c:	da33      	bge.n	8004186 <__kernel_rem_pio2+0x5ce>
 800411e:	f1bb 0f00 	cmp.w	fp, #0
 8004122:	d036      	beq.n	8004192 <__kernel_rem_pio2+0x5da>
 8004124:	4602      	mov	r2, r0
 8004126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800412a:	9c04      	ldr	r4, [sp, #16]
 800412c:	e9c4 2300 	strd	r2, r3, [r4]
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004138:	f7fc f872 	bl	8000220 <__aeabi_dsub>
 800413c:	ae4a      	add	r6, sp, #296	; 0x128
 800413e:	2401      	movs	r4, #1
 8004140:	42a5      	cmp	r5, r4
 8004142:	da29      	bge.n	8004198 <__kernel_rem_pio2+0x5e0>
 8004144:	f1bb 0f00 	cmp.w	fp, #0
 8004148:	d002      	beq.n	8004150 <__kernel_rem_pio2+0x598>
 800414a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800414e:	4619      	mov	r1, r3
 8004150:	9b04      	ldr	r3, [sp, #16]
 8004152:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004156:	e7a1      	b.n	800409c <__kernel_rem_pio2+0x4e4>
 8004158:	9c05      	ldr	r4, [sp, #20]
 800415a:	ab48      	add	r3, sp, #288	; 0x120
 800415c:	441c      	add	r4, r3
 800415e:	2000      	movs	r0, #0
 8004160:	2100      	movs	r1, #0
 8004162:	2d00      	cmp	r5, #0
 8004164:	da09      	bge.n	800417a <__kernel_rem_pio2+0x5c2>
 8004166:	f1bb 0f00 	cmp.w	fp, #0
 800416a:	d002      	beq.n	8004172 <__kernel_rem_pio2+0x5ba>
 800416c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004170:	4619      	mov	r1, r3
 8004172:	9b04      	ldr	r3, [sp, #16]
 8004174:	e9c3 0100 	strd	r0, r1, [r3]
 8004178:	e790      	b.n	800409c <__kernel_rem_pio2+0x4e4>
 800417a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800417e:	f7fc f851 	bl	8000224 <__adddf3>
 8004182:	3d01      	subs	r5, #1
 8004184:	e7ed      	b.n	8004162 <__kernel_rem_pio2+0x5aa>
 8004186:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800418a:	f7fc f84b 	bl	8000224 <__adddf3>
 800418e:	3c01      	subs	r4, #1
 8004190:	e7c3      	b.n	800411a <__kernel_rem_pio2+0x562>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	e7c8      	b.n	800412a <__kernel_rem_pio2+0x572>
 8004198:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800419c:	f7fc f842 	bl	8000224 <__adddf3>
 80041a0:	3401      	adds	r4, #1
 80041a2:	e7cd      	b.n	8004140 <__kernel_rem_pio2+0x588>
 80041a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80041a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80041ac:	9b00      	ldr	r3, [sp, #0]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	4632      	mov	r2, r6
 80041b4:	463b      	mov	r3, r7
 80041b6:	4640      	mov	r0, r8
 80041b8:	4649      	mov	r1, r9
 80041ba:	f7fc f833 	bl	8000224 <__adddf3>
 80041be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f7fc f829 	bl	8000220 <__aeabi_dsub>
 80041ce:	4632      	mov	r2, r6
 80041d0:	463b      	mov	r3, r7
 80041d2:	f7fc f827 	bl	8000224 <__adddf3>
 80041d6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80041da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041de:	ed8a 7b00 	vstr	d7, [sl]
 80041e2:	e770      	b.n	80040c6 <__kernel_rem_pio2+0x50e>
 80041e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80041e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80041ec:	4640      	mov	r0, r8
 80041ee:	4632      	mov	r2, r6
 80041f0:	463b      	mov	r3, r7
 80041f2:	4649      	mov	r1, r9
 80041f4:	f7fc f816 	bl	8000224 <__adddf3>
 80041f8:	e9cd 0100 	strd	r0, r1, [sp]
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4640      	mov	r0, r8
 8004202:	4649      	mov	r1, r9
 8004204:	f7fc f80c 	bl	8000220 <__aeabi_dsub>
 8004208:	4632      	mov	r2, r6
 800420a:	463b      	mov	r3, r7
 800420c:	f7fc f80a 	bl	8000224 <__adddf3>
 8004210:	ed9d 7b00 	vldr	d7, [sp]
 8004214:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004218:	ed84 7b00 	vstr	d7, [r4]
 800421c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004220:	e757      	b.n	80040d2 <__kernel_rem_pio2+0x51a>
 8004222:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004226:	f7fb fffd 	bl	8000224 <__adddf3>
 800422a:	3d01      	subs	r5, #1
 800422c:	e75c      	b.n	80040e8 <__kernel_rem_pio2+0x530>
 800422e:	9b04      	ldr	r3, [sp, #16]
 8004230:	9a04      	ldr	r2, [sp, #16]
 8004232:	601f      	str	r7, [r3, #0]
 8004234:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004238:	605c      	str	r4, [r3, #4]
 800423a:	609d      	str	r5, [r3, #8]
 800423c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004240:	60d3      	str	r3, [r2, #12]
 8004242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004246:	6110      	str	r0, [r2, #16]
 8004248:	6153      	str	r3, [r2, #20]
 800424a:	e727      	b.n	800409c <__kernel_rem_pio2+0x4e4>
 800424c:	41700000 	.word	0x41700000
 8004250:	3e700000 	.word	0x3e700000
 8004254:	00000000 	.word	0x00000000

08004258 <__kernel_cos>:
 8004258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	ec57 6b10 	vmov	r6, r7, d0
 8004260:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004264:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004268:	ed8d 1b00 	vstr	d1, [sp]
 800426c:	da07      	bge.n	800427e <__kernel_cos+0x26>
 800426e:	ee10 0a10 	vmov	r0, s0
 8004272:	4639      	mov	r1, r7
 8004274:	f7fc fc26 	bl	8000ac4 <__aeabi_d2iz>
 8004278:	2800      	cmp	r0, #0
 800427a:	f000 8088 	beq.w	800438e <__kernel_cos+0x136>
 800427e:	4632      	mov	r2, r6
 8004280:	463b      	mov	r3, r7
 8004282:	4630      	mov	r0, r6
 8004284:	4639      	mov	r1, r7
 8004286:	f7fc f983 	bl	8000590 <__aeabi_dmul>
 800428a:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <__kernel_cos+0x178>)
 800428c:	2200      	movs	r2, #0
 800428e:	4604      	mov	r4, r0
 8004290:	460d      	mov	r5, r1
 8004292:	f7fc f97d 	bl	8000590 <__aeabi_dmul>
 8004296:	a340      	add	r3, pc, #256	; (adr r3, 8004398 <__kernel_cos+0x140>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	4682      	mov	sl, r0
 800429e:	468b      	mov	fp, r1
 80042a0:	4620      	mov	r0, r4
 80042a2:	4629      	mov	r1, r5
 80042a4:	f7fc f974 	bl	8000590 <__aeabi_dmul>
 80042a8:	a33d      	add	r3, pc, #244	; (adr r3, 80043a0 <__kernel_cos+0x148>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fb ffb9 	bl	8000224 <__adddf3>
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	f7fc f96b 	bl	8000590 <__aeabi_dmul>
 80042ba:	a33b      	add	r3, pc, #236	; (adr r3, 80043a8 <__kernel_cos+0x150>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb ffae 	bl	8000220 <__aeabi_dsub>
 80042c4:	4622      	mov	r2, r4
 80042c6:	462b      	mov	r3, r5
 80042c8:	f7fc f962 	bl	8000590 <__aeabi_dmul>
 80042cc:	a338      	add	r3, pc, #224	; (adr r3, 80043b0 <__kernel_cos+0x158>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fb ffa7 	bl	8000224 <__adddf3>
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	f7fc f959 	bl	8000590 <__aeabi_dmul>
 80042de:	a336      	add	r3, pc, #216	; (adr r3, 80043b8 <__kernel_cos+0x160>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fb ff9c 	bl	8000220 <__aeabi_dsub>
 80042e8:	4622      	mov	r2, r4
 80042ea:	462b      	mov	r3, r5
 80042ec:	f7fc f950 	bl	8000590 <__aeabi_dmul>
 80042f0:	a333      	add	r3, pc, #204	; (adr r3, 80043c0 <__kernel_cos+0x168>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fb ff95 	bl	8000224 <__adddf3>
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	f7fc f947 	bl	8000590 <__aeabi_dmul>
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	f7fc f943 	bl	8000590 <__aeabi_dmul>
 800430a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800430e:	4604      	mov	r4, r0
 8004310:	460d      	mov	r5, r1
 8004312:	4630      	mov	r0, r6
 8004314:	4639      	mov	r1, r7
 8004316:	f7fc f93b 	bl	8000590 <__aeabi_dmul>
 800431a:	460b      	mov	r3, r1
 800431c:	4602      	mov	r2, r0
 800431e:	4629      	mov	r1, r5
 8004320:	4620      	mov	r0, r4
 8004322:	f7fb ff7d 	bl	8000220 <__aeabi_dsub>
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <__kernel_cos+0x17c>)
 8004328:	4598      	cmp	r8, r3
 800432a:	4606      	mov	r6, r0
 800432c:	460f      	mov	r7, r1
 800432e:	dc10      	bgt.n	8004352 <__kernel_cos+0xfa>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4650      	mov	r0, sl
 8004336:	4659      	mov	r1, fp
 8004338:	f7fb ff72 	bl	8000220 <__aeabi_dsub>
 800433c:	460b      	mov	r3, r1
 800433e:	4926      	ldr	r1, [pc, #152]	; (80043d8 <__kernel_cos+0x180>)
 8004340:	4602      	mov	r2, r0
 8004342:	2000      	movs	r0, #0
 8004344:	f7fb ff6c 	bl	8000220 <__aeabi_dsub>
 8004348:	ec41 0b10 	vmov	d0, r0, r1
 800434c:	b003      	add	sp, #12
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004352:	4b22      	ldr	r3, [pc, #136]	; (80043dc <__kernel_cos+0x184>)
 8004354:	4920      	ldr	r1, [pc, #128]	; (80043d8 <__kernel_cos+0x180>)
 8004356:	4598      	cmp	r8, r3
 8004358:	bfcc      	ite	gt
 800435a:	4d21      	ldrgt	r5, [pc, #132]	; (80043e0 <__kernel_cos+0x188>)
 800435c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004360:	2400      	movs	r4, #0
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	2000      	movs	r0, #0
 8004368:	f7fb ff5a 	bl	8000220 <__aeabi_dsub>
 800436c:	4622      	mov	r2, r4
 800436e:	4680      	mov	r8, r0
 8004370:	4689      	mov	r9, r1
 8004372:	462b      	mov	r3, r5
 8004374:	4650      	mov	r0, sl
 8004376:	4659      	mov	r1, fp
 8004378:	f7fb ff52 	bl	8000220 <__aeabi_dsub>
 800437c:	4632      	mov	r2, r6
 800437e:	463b      	mov	r3, r7
 8004380:	f7fb ff4e 	bl	8000220 <__aeabi_dsub>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4640      	mov	r0, r8
 800438a:	4649      	mov	r1, r9
 800438c:	e7da      	b.n	8004344 <__kernel_cos+0xec>
 800438e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80043c8 <__kernel_cos+0x170>
 8004392:	e7db      	b.n	800434c <__kernel_cos+0xf4>
 8004394:	f3af 8000 	nop.w
 8004398:	be8838d4 	.word	0xbe8838d4
 800439c:	bda8fae9 	.word	0xbda8fae9
 80043a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80043a4:	3e21ee9e 	.word	0x3e21ee9e
 80043a8:	809c52ad 	.word	0x809c52ad
 80043ac:	3e927e4f 	.word	0x3e927e4f
 80043b0:	19cb1590 	.word	0x19cb1590
 80043b4:	3efa01a0 	.word	0x3efa01a0
 80043b8:	16c15177 	.word	0x16c15177
 80043bc:	3f56c16c 	.word	0x3f56c16c
 80043c0:	5555554c 	.word	0x5555554c
 80043c4:	3fa55555 	.word	0x3fa55555
 80043c8:	00000000 	.word	0x00000000
 80043cc:	3ff00000 	.word	0x3ff00000
 80043d0:	3fe00000 	.word	0x3fe00000
 80043d4:	3fd33332 	.word	0x3fd33332
 80043d8:	3ff00000 	.word	0x3ff00000
 80043dc:	3fe90000 	.word	0x3fe90000
 80043e0:	3fd20000 	.word	0x3fd20000
 80043e4:	00000000 	.word	0x00000000

080043e8 <__kernel_sin>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	ed2d 8b04 	vpush	{d8-d9}
 80043f0:	eeb0 8a41 	vmov.f32	s16, s2
 80043f4:	eef0 8a61 	vmov.f32	s17, s3
 80043f8:	ec55 4b10 	vmov	r4, r5, d0
 80043fc:	b083      	sub	sp, #12
 80043fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004402:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004406:	9001      	str	r0, [sp, #4]
 8004408:	da06      	bge.n	8004418 <__kernel_sin+0x30>
 800440a:	ee10 0a10 	vmov	r0, s0
 800440e:	4629      	mov	r1, r5
 8004410:	f7fc fb58 	bl	8000ac4 <__aeabi_d2iz>
 8004414:	2800      	cmp	r0, #0
 8004416:	d051      	beq.n	80044bc <__kernel_sin+0xd4>
 8004418:	4622      	mov	r2, r4
 800441a:	462b      	mov	r3, r5
 800441c:	4620      	mov	r0, r4
 800441e:	4629      	mov	r1, r5
 8004420:	f7fc f8b6 	bl	8000590 <__aeabi_dmul>
 8004424:	4682      	mov	sl, r0
 8004426:	468b      	mov	fp, r1
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4620      	mov	r0, r4
 800442e:	4629      	mov	r1, r5
 8004430:	f7fc f8ae 	bl	8000590 <__aeabi_dmul>
 8004434:	a341      	add	r3, pc, #260	; (adr r3, 800453c <__kernel_sin+0x154>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	4680      	mov	r8, r0
 800443c:	4689      	mov	r9, r1
 800443e:	4650      	mov	r0, sl
 8004440:	4659      	mov	r1, fp
 8004442:	f7fc f8a5 	bl	8000590 <__aeabi_dmul>
 8004446:	a33f      	add	r3, pc, #252	; (adr r3, 8004544 <__kernel_sin+0x15c>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fb fee8 	bl	8000220 <__aeabi_dsub>
 8004450:	4652      	mov	r2, sl
 8004452:	465b      	mov	r3, fp
 8004454:	f7fc f89c 	bl	8000590 <__aeabi_dmul>
 8004458:	a33c      	add	r3, pc, #240	; (adr r3, 800454c <__kernel_sin+0x164>)
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f7fb fee1 	bl	8000224 <__adddf3>
 8004462:	4652      	mov	r2, sl
 8004464:	465b      	mov	r3, fp
 8004466:	f7fc f893 	bl	8000590 <__aeabi_dmul>
 800446a:	a33a      	add	r3, pc, #232	; (adr r3, 8004554 <__kernel_sin+0x16c>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fb fed6 	bl	8000220 <__aeabi_dsub>
 8004474:	4652      	mov	r2, sl
 8004476:	465b      	mov	r3, fp
 8004478:	f7fc f88a 	bl	8000590 <__aeabi_dmul>
 800447c:	a337      	add	r3, pc, #220	; (adr r3, 800455c <__kernel_sin+0x174>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fb fecf 	bl	8000224 <__adddf3>
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	4606      	mov	r6, r0
 800448a:	460f      	mov	r7, r1
 800448c:	b9eb      	cbnz	r3, 80044ca <__kernel_sin+0xe2>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4650      	mov	r0, sl
 8004494:	4659      	mov	r1, fp
 8004496:	f7fc f87b 	bl	8000590 <__aeabi_dmul>
 800449a:	a325      	add	r3, pc, #148	; (adr r3, 8004530 <__kernel_sin+0x148>)
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f7fb febe 	bl	8000220 <__aeabi_dsub>
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	f7fc f872 	bl	8000590 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4620      	mov	r0, r4
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7fb feb6 	bl	8000224 <__adddf3>
 80044b8:	4604      	mov	r4, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	ec45 4b10 	vmov	d0, r4, r5
 80044c0:	b003      	add	sp, #12
 80044c2:	ecbd 8b04 	vpop	{d8-d9}
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <__kernel_sin+0x150>)
 80044cc:	ec51 0b18 	vmov	r0, r1, d8
 80044d0:	2200      	movs	r2, #0
 80044d2:	f7fc f85d 	bl	8000590 <__aeabi_dmul>
 80044d6:	4632      	mov	r2, r6
 80044d8:	ec41 0b19 	vmov	d9, r0, r1
 80044dc:	463b      	mov	r3, r7
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fc f855 	bl	8000590 <__aeabi_dmul>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	ec51 0b19 	vmov	r0, r1, d9
 80044ee:	f7fb fe97 	bl	8000220 <__aeabi_dsub>
 80044f2:	4652      	mov	r2, sl
 80044f4:	465b      	mov	r3, fp
 80044f6:	f7fc f84b 	bl	8000590 <__aeabi_dmul>
 80044fa:	ec53 2b18 	vmov	r2, r3, d8
 80044fe:	f7fb fe8f 	bl	8000220 <__aeabi_dsub>
 8004502:	a30b      	add	r3, pc, #44	; (adr r3, 8004530 <__kernel_sin+0x148>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	4606      	mov	r6, r0
 800450a:	460f      	mov	r7, r1
 800450c:	4640      	mov	r0, r8
 800450e:	4649      	mov	r1, r9
 8004510:	f7fc f83e 	bl	8000590 <__aeabi_dmul>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb fe82 	bl	8000224 <__adddf3>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fe7a 	bl	8000220 <__aeabi_dsub>
 800452c:	e7c4      	b.n	80044b8 <__kernel_sin+0xd0>
 800452e:	bf00      	nop
 8004530:	55555549 	.word	0x55555549
 8004534:	3fc55555 	.word	0x3fc55555
 8004538:	3fe00000 	.word	0x3fe00000
 800453c:	5acfd57c 	.word	0x5acfd57c
 8004540:	3de5d93a 	.word	0x3de5d93a
 8004544:	8a2b9ceb 	.word	0x8a2b9ceb
 8004548:	3e5ae5e6 	.word	0x3e5ae5e6
 800454c:	57b1fe7d 	.word	0x57b1fe7d
 8004550:	3ec71de3 	.word	0x3ec71de3
 8004554:	19c161d5 	.word	0x19c161d5
 8004558:	3f2a01a0 	.word	0x3f2a01a0
 800455c:	1110f8a6 	.word	0x1110f8a6
 8004560:	3f811111 	.word	0x3f811111

08004564 <fabs>:
 8004564:	ec51 0b10 	vmov	r0, r1, d0
 8004568:	ee10 2a10 	vmov	r2, s0
 800456c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004570:	ec43 2b10 	vmov	d0, r2, r3
 8004574:	4770      	bx	lr
	...

08004578 <scalbn>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	ec55 4b10 	vmov	r4, r5, d0
 800457e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004582:	4606      	mov	r6, r0
 8004584:	462b      	mov	r3, r5
 8004586:	b999      	cbnz	r1, 80045b0 <scalbn+0x38>
 8004588:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800458c:	4323      	orrs	r3, r4
 800458e:	d03f      	beq.n	8004610 <scalbn+0x98>
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <scalbn+0xf0>)
 8004592:	4629      	mov	r1, r5
 8004594:	ee10 0a10 	vmov	r0, s0
 8004598:	2200      	movs	r2, #0
 800459a:	f7fb fff9 	bl	8000590 <__aeabi_dmul>
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <scalbn+0xf4>)
 80045a0:	429e      	cmp	r6, r3
 80045a2:	4604      	mov	r4, r0
 80045a4:	460d      	mov	r5, r1
 80045a6:	da10      	bge.n	80045ca <scalbn+0x52>
 80045a8:	a327      	add	r3, pc, #156	; (adr r3, 8004648 <scalbn+0xd0>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	e01f      	b.n	80045f0 <scalbn+0x78>
 80045b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80045b4:	4291      	cmp	r1, r2
 80045b6:	d10c      	bne.n	80045d2 <scalbn+0x5a>
 80045b8:	ee10 2a10 	vmov	r2, s0
 80045bc:	4620      	mov	r0, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	f7fb fe30 	bl	8000224 <__adddf3>
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
 80045c8:	e022      	b.n	8004610 <scalbn+0x98>
 80045ca:	460b      	mov	r3, r1
 80045cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80045d0:	3936      	subs	r1, #54	; 0x36
 80045d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80045d6:	4296      	cmp	r6, r2
 80045d8:	dd0d      	ble.n	80045f6 <scalbn+0x7e>
 80045da:	2d00      	cmp	r5, #0
 80045dc:	a11c      	add	r1, pc, #112	; (adr r1, 8004650 <scalbn+0xd8>)
 80045de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e2:	da02      	bge.n	80045ea <scalbn+0x72>
 80045e4:	a11c      	add	r1, pc, #112	; (adr r1, 8004658 <scalbn+0xe0>)
 80045e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045ea:	a319      	add	r3, pc, #100	; (adr r3, 8004650 <scalbn+0xd8>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fb ffce 	bl	8000590 <__aeabi_dmul>
 80045f4:	e7e6      	b.n	80045c4 <scalbn+0x4c>
 80045f6:	1872      	adds	r2, r6, r1
 80045f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80045fc:	428a      	cmp	r2, r1
 80045fe:	dcec      	bgt.n	80045da <scalbn+0x62>
 8004600:	2a00      	cmp	r2, #0
 8004602:	dd08      	ble.n	8004616 <scalbn+0x9e>
 8004604:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800460c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004610:	ec45 4b10 	vmov	d0, r4, r5
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800461a:	da08      	bge.n	800462e <scalbn+0xb6>
 800461c:	2d00      	cmp	r5, #0
 800461e:	a10a      	add	r1, pc, #40	; (adr r1, 8004648 <scalbn+0xd0>)
 8004620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004624:	dac0      	bge.n	80045a8 <scalbn+0x30>
 8004626:	a10e      	add	r1, pc, #56	; (adr r1, 8004660 <scalbn+0xe8>)
 8004628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800462c:	e7bc      	b.n	80045a8 <scalbn+0x30>
 800462e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004632:	3236      	adds	r2, #54	; 0x36
 8004634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004638:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800463c:	4620      	mov	r0, r4
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <scalbn+0xf8>)
 8004640:	2200      	movs	r2, #0
 8004642:	e7d5      	b.n	80045f0 <scalbn+0x78>
 8004644:	f3af 8000 	nop.w
 8004648:	c2f8f359 	.word	0xc2f8f359
 800464c:	01a56e1f 	.word	0x01a56e1f
 8004650:	8800759c 	.word	0x8800759c
 8004654:	7e37e43c 	.word	0x7e37e43c
 8004658:	8800759c 	.word	0x8800759c
 800465c:	fe37e43c 	.word	0xfe37e43c
 8004660:	c2f8f359 	.word	0xc2f8f359
 8004664:	81a56e1f 	.word	0x81a56e1f
 8004668:	43500000 	.word	0x43500000
 800466c:	ffff3cb0 	.word	0xffff3cb0
 8004670:	3c900000 	.word	0x3c900000
 8004674:	00000000 	.word	0x00000000

08004678 <floor>:
 8004678:	ec51 0b10 	vmov	r0, r1, d0
 800467c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004688:	2e13      	cmp	r6, #19
 800468a:	ee10 5a10 	vmov	r5, s0
 800468e:	ee10 8a10 	vmov	r8, s0
 8004692:	460c      	mov	r4, r1
 8004694:	dc31      	bgt.n	80046fa <floor+0x82>
 8004696:	2e00      	cmp	r6, #0
 8004698:	da14      	bge.n	80046c4 <floor+0x4c>
 800469a:	a333      	add	r3, pc, #204	; (adr r3, 8004768 <floor+0xf0>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb fdc0 	bl	8000224 <__adddf3>
 80046a4:	2200      	movs	r2, #0
 80046a6:	2300      	movs	r3, #0
 80046a8:	f7fc fa02 	bl	8000ab0 <__aeabi_dcmpgt>
 80046ac:	b138      	cbz	r0, 80046be <floor+0x46>
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	da53      	bge.n	800475a <floor+0xe2>
 80046b2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80046b6:	4325      	orrs	r5, r4
 80046b8:	d052      	beq.n	8004760 <floor+0xe8>
 80046ba:	4c2d      	ldr	r4, [pc, #180]	; (8004770 <floor+0xf8>)
 80046bc:	2500      	movs	r5, #0
 80046be:	4621      	mov	r1, r4
 80046c0:	4628      	mov	r0, r5
 80046c2:	e024      	b.n	800470e <floor+0x96>
 80046c4:	4f2b      	ldr	r7, [pc, #172]	; (8004774 <floor+0xfc>)
 80046c6:	4137      	asrs	r7, r6
 80046c8:	ea01 0307 	and.w	r3, r1, r7
 80046cc:	4303      	orrs	r3, r0
 80046ce:	d01e      	beq.n	800470e <floor+0x96>
 80046d0:	a325      	add	r3, pc, #148	; (adr r3, 8004768 <floor+0xf0>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb fda5 	bl	8000224 <__adddf3>
 80046da:	2200      	movs	r2, #0
 80046dc:	2300      	movs	r3, #0
 80046de:	f7fc f9e7 	bl	8000ab0 <__aeabi_dcmpgt>
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d0eb      	beq.n	80046be <floor+0x46>
 80046e6:	2c00      	cmp	r4, #0
 80046e8:	bfbe      	ittt	lt
 80046ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80046ee:	4133      	asrlt	r3, r6
 80046f0:	18e4      	addlt	r4, r4, r3
 80046f2:	ea24 0407 	bic.w	r4, r4, r7
 80046f6:	2500      	movs	r5, #0
 80046f8:	e7e1      	b.n	80046be <floor+0x46>
 80046fa:	2e33      	cmp	r6, #51	; 0x33
 80046fc:	dd0b      	ble.n	8004716 <floor+0x9e>
 80046fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004702:	d104      	bne.n	800470e <floor+0x96>
 8004704:	ee10 2a10 	vmov	r2, s0
 8004708:	460b      	mov	r3, r1
 800470a:	f7fb fd8b 	bl	8000224 <__adddf3>
 800470e:	ec41 0b10 	vmov	d0, r0, r1
 8004712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004716:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800471a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800471e:	40df      	lsrs	r7, r3
 8004720:	4238      	tst	r0, r7
 8004722:	d0f4      	beq.n	800470e <floor+0x96>
 8004724:	a310      	add	r3, pc, #64	; (adr r3, 8004768 <floor+0xf0>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb fd7b 	bl	8000224 <__adddf3>
 800472e:	2200      	movs	r2, #0
 8004730:	2300      	movs	r3, #0
 8004732:	f7fc f9bd 	bl	8000ab0 <__aeabi_dcmpgt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d0c1      	beq.n	80046be <floor+0x46>
 800473a:	2c00      	cmp	r4, #0
 800473c:	da0a      	bge.n	8004754 <floor+0xdc>
 800473e:	2e14      	cmp	r6, #20
 8004740:	d101      	bne.n	8004746 <floor+0xce>
 8004742:	3401      	adds	r4, #1
 8004744:	e006      	b.n	8004754 <floor+0xdc>
 8004746:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800474a:	2301      	movs	r3, #1
 800474c:	40b3      	lsls	r3, r6
 800474e:	441d      	add	r5, r3
 8004750:	45a8      	cmp	r8, r5
 8004752:	d8f6      	bhi.n	8004742 <floor+0xca>
 8004754:	ea25 0507 	bic.w	r5, r5, r7
 8004758:	e7b1      	b.n	80046be <floor+0x46>
 800475a:	2500      	movs	r5, #0
 800475c:	462c      	mov	r4, r5
 800475e:	e7ae      	b.n	80046be <floor+0x46>
 8004760:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004764:	e7ab      	b.n	80046be <floor+0x46>
 8004766:	bf00      	nop
 8004768:	8800759c 	.word	0x8800759c
 800476c:	7e37e43c 	.word	0x7e37e43c
 8004770:	bff00000 	.word	0xbff00000
 8004774:	000fffff 	.word	0x000fffff

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
